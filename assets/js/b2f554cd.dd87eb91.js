"use strict";(self.webpackChunklinkwell_nodes_documentation=self.webpackChunklinkwell_nodes_documentation||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/Chainlink-Node-Operator","metadata":{"permalink":"/blog/Chainlink-Node-Operator","source":"@site/blog/Chainlink-Node-Operator/index.md","title":"Chainlink Node Operators: The Backbone of the Chainlink Network","description":"Exploring the Role of Chainlink Node Operators in Powering Decentralized Oracle Networks that Underpin Chainlink\u2019s Official Suite of Web3 Services","date":"2024-12-15T00:00:00.000Z","formattedDate":"December 15, 2024","tags":[{"label":"chainlink node operator","permalink":"/blog/tags/chainlink-node-operator"}],"readingTime":11.745,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"}],"frontMatter":{"title":"Chainlink Node Operators: The Backbone of the Chainlink Network","description":"Exploring the Role of Chainlink Node Operators in Powering Decentralized Oracle Networks that Underpin Chainlink\u2019s Official Suite of Web3 Services","date":"2024-12-15","image":"https://docs.linkwellnodes.io/img/.../img.png","keywords":["chainlink oracle","chainlink node operator","smart contracts","web3","blockchain"],"authors":["Ken"],"tags":["chainlink node operator"]},"nextItem":{"title":"Introducing A Custom Chainlink Price Feed Solution For Web3 Apps","permalink":"/blog/Custom-Chainlink-Price-Feed-Solution"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>Exploring the Role of Chainlink Node Operators in Powering Decentralized Oracle Networks that Underpin Chainlink\u2019s Official Suite of Web3 Services</h2>\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/chainlink-node-operator/chainlink-node-operator.webp\\" alt=\\"Chainlink Node Operator\\" />\\n</p>\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**On this page**:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={2}\\n/>\\n\\n---\\n\\n## Introduction\\n\\nDue to the inherent security properties of blockchains, smart contracts (on-chain) cannot directly access data from external systems (off-chain).\\n\\nThis limitation, known as the [oracle problem](https://chain.link/education-hub/oracle-problem), requires the use of oracles as middleware to facilitate the secure, bidirectional transfer of data between on-chain and off-chain environments. Chainlink node operators form the backbone of the Chainlink Network, powering decentralized oracle networks that enable secure and reliable access to external data. They manage the critical infrastructure that ensures smart contracts across blockchains can seamlessly interact with real-world data, enabling them to function effectively.\\n\\nIn this article, our goal is to provide a detailed view of Chainlink node operators, who they are, what they do, and more.\\n\\n<center><iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/jD9903qyt6w\\" frameborder=\\"0\\" allowfullscreen></iframe></center>\\n\\n## Who are Chainlink Node Operators?\\n\\nChainlink node operators are globally-distributed teams specializing in running secure, reliable, and fault-tolerant infrastructure. They typically come from diverse professional backgrounds in the Web2 space - including system administration, network engineering, security, DevOps, monitoring, and others.\\n\\nChainlink node operators can be grouped into three primary categories: **Enterprise Nodes**, **DevOps Nodes**, and **Community Nodes**.\\n\\n- **Enterprise Nodes:** These nodes are operated by established firms like T-Systems, Vodafone, or Swisscom, which have decades of experience managing back-end infrastructure for Web2 systems.\\n- **DevOps Nodes:** Teams such as BlockDaemon and Infura fall into this category. They bring proven experience in providing blockchain infrastructure, including RPC nodes and PoS validators, making them vital contributors to decentralized networks.\\n- **Community Nodes:** Community Chainlink node operators emerge from within the Chainlink community itself. These teams typically begin by offering support, such as information-sharing or custom off-chain services, and progress to becoming trusted and reputable operators. Examples of teams in this category include LinkRiver and Matrixed.Link.\\n\\nChainlink node operator teams typically consist of smaller organizations of 2-10 members in the case of community nodes, while DevOps or Enterprise Chainlink node operators are typically a branch of a larger organization.  \\n\\nRegardless of the category, Chainlink node operators all play a similar role - powering the Chainlink Network by leveraging their experience and expertise to facilitate the secure and reliable operation of Chainlink services.\\n\\n## What Chainlink Node Operators Do\\n\\nWithin the **Community Nodes** category, there are two subgroups: **official node operators** and **community node operators**. Official Chainlink node operators have been security-reviewed and approved by Chainlink Labs to support their suite of Web3 services (such as Chainlink\u2019s official [price feeds](https://data.chain.link/feeds)).\\n\\n![Chainlink Web3 Services](/img/chainlink-node-operator/chainlink-web3-services.webp \\"Chainlink Web3 Services\\")<center><small>Credit: [Chainlink](https://blog.chain.link/platform-for-verifiable-web)</small></center>\\n\\nCommunity Chainlink node operators (such as LinkWell Nodes) play a slightly different role in the ecosystem. This niche of Chainlink oracle operator typically includes offering custom Chainlink oracle integrations for members of the community. While they don\u2019t formally participate in providing data for Chainlink\u2019s official suite of data feeds, they choose to instead focus on providing Web3 builders with [customized Chainlink data feeds](https://docs.linkwellnodes.io/) that fit their specific project\u2019s need and price-point.\\n\\nRegardless of the category of node operator, an operator\u2019s day-to-day activities are similar in many ways. Responsibilities typically include:\\n\\n1. **Infrastructure Management:** Operating and maintaining Chainlink nodes, blockchain full nodes, external adapters, reverse proxies, security tools, monitoring tools, and more.\\n2. **Supporting Chainlink Services:** Providing oracle services for official offerings like CCIP, Functions, Data Feeds, Automation, and VRF (official node operators only), or the more legacy basic request model or FluxAggregator services (community node operators).\\n3. **Data Sourcing and Delivery:** Aggregating and delivering accurate data on-chain from diverse sources to ensure decentralization and reliability.\\n4. **Monitoring and Alerting:** Using open source or enterprise grade tooling for monitoring, alerting, observability, and advanced analytics.\\n5. **Security and Reliability:** Implementing robust security measures, conducting audits, and maintaining fault-tolerant systems.\\n6. **Scalability and Optimization:** Scaling and optimizing infrastructure for performance, reliability, and cost efficiency.\\n7. **Community Engagement:** Participating in Chainlink events, supporting the ecosystem, and collaborating with the community.\\n\\nMany Chainlink node operator teams contribute to more than just supporting the Chainlink network - choosing also to pursue additional initiatives within the ecosystem, such as DexTrac\u2019s [Prism](https://prism.dextrac.com/chainlink) analytics tool or LinkPool\u2019s [staking platform](https://stake.link/). At LinkWell Nodes, we focus on developing [custom Chainlink oracle solutions](https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing) for Web3 teams that need specific off-chain data or computation.\\n\\nAdditionally, some teams choose to extend their expertise to support other projects, including offering validation services for established or emerging blockchain networks.\\n\\n## How Chainlink Nodes Form Decentralized Oracle Networks (DONs)\\n\\nWhile individual Chainlink oracles can directly handle requests (ie, using the\xa0[Any API / basic request model](https://docs.linkwellnodes.io/blog/Chainlink-Basic-Request-Model-Architectures)), Chainlink oracles achieve their full potential when working together in a decentralized oracle network. These networks provide off-chain computation and data aggregation from multiple oracles, eliminating single points of failure and ensuring secure and reliable data delivery to the blockchain.\\n\\n![Chainlink Decentralized Oracle Network](/img/chainlink-node-operator/chainlink-don.webp \\"Chainlink Decentralized Oracle Network\\")<center><small>Credit: [Chainlink](https://blog.chain.link/how-chainlink-is-helping-blockchain-cross-the-chasm/)</small></center>\\n\\nFigure 2. Decentralized Oracle Network (source: Chainlink)\\n\\nAt the heart of every decentralized oracle network is the\xa0**Chainlink oracle**\xa0- a runtime developed in Go by\xa0[Chainlink Labs](https://chainlinklabs.com/). The Chainlink network is an expandable ensemble of independent oracles. While anyone can run their own singular Chainlink oracle, decentralized oracle networks can impose their own rules regarding access and data aggregation.\\n\\nUnlike typical blockchain environments, the Chainlink network does not employ a unified consensus mechanism, thereby allowing for greater flexibility (and decentralization) among its networks and Web services. These services, powered by decentralized oracle networks using the [OCR](https://docs.chain.link/architecture-overview/off-chain-reporting) protocol include CCIP, Functions, VRF, Automation, Data Feeds, Price Feeds, and Proof of Reserve, with more to come such as DECO.\\n\\n## Who Should Become a Chainlink Node Operator\\n\\nBecoming a Chainlink node operator is as straightforward as deploying a Chainlink node. From our experience, many Web3 teams opt to run their own Chainlink nodes to reduce the operational costs associated with using an official Chainlink service or a third-party Chainlink node operator like us, particularly in the case for accessing off-chain data. That being said, only a select few teams are recognized as official Chainlink node operators. In our view, to be considered a true Chainlink node operator, you must implement an enterprise-grade deployment that includes robust security measures, comprehensive monitoring, high availability, and the ability to provide reliable Chainlink services.\\n\\nAt the time of writing, there are 94 node operator teams supporting Chainlink\u2019s services, according to [Chainlink Ecosystem](https://www.chainlinkecosystem.com/category/node-operator). DexTrac\u2019s [Prism Analytics](https://prism.dextrac.com/chainlink/operators) tool, however, lists 53 official Chainlink node operators. While we don\u2019t know what the exact number is at this time, we suspect that the true number of node operators may fall within the range of 53-94 teams. \\n\\nAdditionally, while we can\u2019t speak for Chainlink Labs regarding their future needs or criteria for Chainlink node operators as they work toward becoming a global Web3 standard, we can offer a list of pros and cons based on our experiences and observations:\\n\\n**Pros**:\\n\\n- **Contributing to Chainlink\u2019s Mission:** Becoming a Chainlink node operator allows you to play a direct role in advancing Chainlink\u2019s vision of a world powered by cryptographic truth, supporting the network and its community with oracle services.\\n- **Earning Potential:** Node operators are compensated for delivering reliable, accurate, and secure off-chain data and computation, offering a clear financial incentive.\\n- **Hands-On Access to Emerging Technology:** Running a Chainlink oracle provides invaluable experience with cutting-edge blockchain innovations and the decentralized applications they support.\\n\\n**Cons**:\\n\\n- **Startup and Maintenance Costs:** Setting up and maintaining a Chainlink oracle involves investments in hardware, software, and ongoing operational expenses.\\n- **Technical Demands:** Operating a node requires expertise in blockchain, smart contracts, DevOps, monitoring, networking, system administration, security, and more.\\n- **Time-Intensive Business Model:** Running a Chainlink node is more than technical maintenance, as such is the case with running validators; it resembles managing a traditional business, requiring reputation, credibility, and active business development.\\n\\nOver the last several years, we\'ve observed many enthusiastic individuals express interest in becoming Chainlink node operators. While many possessed the necessary technical skills, they often underestimated the level of business development and overall commitment required to succeed in this role, leading many to abandon their efforts. Becoming a successful Chainlink node operator demands significant time, effort, and dedication. If your primary motivation isn\u2019t rooted in supporting the community and/or advancing Chainlink\u2019s vision, it may be worth considering other opportunities.\\n\\n## Chainlink Node Operator Profitability\\n\\nAlthough we cannot provide official statements about the revenues or profitability of Chainlink node operators, we can offer insights based on our experience as a community node operator as well as analysis of data from Dune dashboards and other sources related to official Chainlink node operator profitability.\\n\\nAccording to [LinkPool\u2019s Chainlink Revenue](https://dune.com/linkpool/chainlink-revenue) dashboard and at the time of writing, official Chainlink node operators have earned just over $400,000,000 in total revenue across all Chainlink services since mainnet launch. Broken up by service, the vast majority of Chainlink revenue has been from Chainlink feeds.\\n \\n<p align=\\"center\\">\\n  <img src=\\"/img/chainlink-node-operator/linkpool-nop-revenue.webp\\" alt=\\"Chainlink Node Operator Revenue Via LinkPool\'s Dune Analytics\\" />\\n</p>\\n\\nAdditionally, an independent analyst, Eric Wallach, conducted fairly robust analysis of Chainlink node operator incomes, expenses, and overall profitability.  [His analysis](https://x.com/ejwallach/status/1635367652196769792) suggested that official Chainlink node operators, at the time of writing, earned roughly $628k (on average) in net income per year. He also provides detailed spreadsheets of his analysis which can be found [here](https://docs.google.com/spreadsheets/d/1QnlvA2eQVGQAsN45FJ9a2DzgSQCyj0cD-22FF6kyaXk/edit?gid=1878917412#gid=1878917412).\\n\\nAs a community Chainlink node operator, our revenue model differs from official Chainlink services. We specialize in providing custom oracle solutions to paying clients. Deploying a Chainlink node on a mainnet incurs monthly expenses ranging from $500 to $1,500, influenced by factors such as high-availability setups versus single oracles, and the choice between operating full RPC nodes or utilizing third-party RPC connections. We offer our custom Chainlink oracle services at a base rate of $500 per month, with fees increasing based on the specific requirements of each oracle integration.\\n\\nBy leveraging custom profitability tools alongside an enterprise-grade monitoring solution (Splunk) to aggregate all Chainlink logs, we gain detailed insights into our income and expenses, down to the individual transaction level.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/chainlink-node-operator/linkwell-txn-analytics.webp\\" alt=\\"LinkWell Nodes Transaction Analytics Dashboard Via Splunk\\" />\\n</p>\\n\\nThis chart provide several key metrics from actual paying clients that we\u2019ve supported within the last year, representing a small slice in time of our actual transaction analytics. The main dashboard panel to focus on here are the \u201cUSD Profit By Transaction\u201d panel, which indicates our profitability per transaction (amount paid minus gas costs).\\n\\nFor these customers in particular, we averaged $1-$2 in profit per transaction. It\u2019s important to note, however, that our profit numbers varied drastically depending on the blockchain network we were supporting as well as the gas costs during the time of transaction. The profitability numbers also don\u2019t take into account our other expenses, including manpower, infrastructure, and more. Moving forward, we plan to release additional analytics and insights on Chainlink node operator profitability.\\n\\n## Requirements for Running a Chainlink Oracle\\n\\nTo deploy and operate a Chainlink oracle, the following [minimum requirements](https://docs.chain.link/chainlink-nodes/resources/requirements) must be met:\\n\\n- **Hardware**: At least 2 CPU cores and 4 GB of RAM for basic operations; more resources are recommended for handling a higher volume of jobs.\\n- **Operating System**: Linux or MacOS; for Windows users, the Windows Subsystem for Linux (WSL) is necessary (not recommended for mainnet deployments).\\n- **Software Dependencies**: Docker for containerization and PostgreSQL (version 12 or later) for database management.\\n- **Blockchain Node Access**: Access to a blockchain node, either by running your own or using a service provider such as Alchemy or QuickNode, to interact with the blockchain network.\\n\\nAdditionally, professional Chainlink node operators need several other components in order to function and operate effectively:\\n\\n- **Monitoring Systems:** Chainlink oracles, and the surrounding off-chain infrastructure, require real-time monitoring and alerting using tools such as the Grafana stack or Splunk.\\n- **Data Source Subscriptions:** Subscriptions to high quality data providers are required for several Chainlink services such as Data Feeds, Price Feeds, and Proof of Reserve.\\n- **On-chain Operator Contract:** This on-chain contract is a critical component for Chainlink oracles running jobs that want to support the [basic request model](https://docs.chain.link/architecture-overview/architecture-request-model) for off-chain data retrieval.\\n- **External Adapters**: [External adapters](https://blog.chain.link/build-and-use-external-adapters/) facilitate custom logic for requests as HTTP services that can be written in any programming language, handling tasks from authenticated data access to IoT processing and bank payments.\\n- **Jobs:** Chainlink oracles require [jobs](https://docs.chain.link/chainlink-nodes/oracle-jobs/jobs). These jobs, provided in the TOML specification, define the parameters (within the Chainlink node interface) of the Chainlink service that they intend to support.\\n- **Automation Tools:** Tools such as Kubernetes, Ansible, Cloudformation, or Terraform are helpful for provisioning, deployment, configuration, and/or orchestration of Chainlink node infrastructure.\\n\\n## Conclusion\\n\\nChainlink node operators play a critical role in the blockchain ecosystem by providing secure, reliable, and decentralized access to off-chain data and computation, enabling the seamless operation of smart contracts. Their efforts bridge the on-chain and off-chain worlds, supporting the functionality and scalability of decentralized Web3 applications.\\n\\nBecoming a successful Chainlink node operator demands a combination of technical proficiency, business strategy, and a dedication to furthering Chainlink\u2019s vision. While the initial setup may pose challenges, it presents a rewarding opportunity for individuals passionate about driving Web3 innovation and supporting decentralized technologies. As Chainlink continues to expand, node operators will remain integral to its growth and the broader development of the internet of contracts.\\n\\n## Chainlink Node Operator Resources\\n\\nIf interested in diving in further on the topic of Chainlink node operators, we\u2019ve aggregated a list of resources below:\\n\\n**[LinkWell Nodes Chainlink Node Operator FAQ](https://docs.linkwellnodes.io/knowledgebase/faq/Chainlink-Operators)**\\n\\n**[Chainlink Ecosystem](https://www.chainlinkecosystem.com/category/node-operator)**\\n\\n**[DexTrac\u2019s Prism Tool](https://prism.dextrac.com/chainlink/operators)**\\n\\n**[LinkPool\u2019s Dune Analytics Dashboards](https://dune.com/linkpool)**\\n\\n**[Chainlink Docs](https://docs.chain.link/chainlink-nodes)**\\n\\n> LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink.\\n> \\n> \\n> *Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!*\\n> \\n> *Disclaimer: all views and opinions expressed in this article are strictly our own.*\\n> \\n\\n![/img/lw-banner_1080x606.webp](/img/lw-banner_1080x606.webp)"},{"id":"/Custom-Chainlink-Price-Feed-Solution","metadata":{"permalink":"/blog/Custom-Chainlink-Price-Feed-Solution","source":"@site/blog/Custom-Chainlink-Price-Feed-Solution/index.md","title":"Introducing A Custom Chainlink Price Feed Solution For Web3 Apps","description":"Introducing LinkWell Nodes\' secure, reliable, and affordable custom Chainlink oracle price feed solution for on-chain smart contract updates.","date":"2024-05-30T00:00:00.000Z","formattedDate":"May 30, 2024","tags":[{"label":"chainlink oracle","permalink":"/blog/tags/chainlink-oracle"},{"label":"smart contracts","permalink":"/blog/tags/smart-contracts"},{"label":"price feed","permalink":"/blog/tags/price-feed"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"}],"readingTime":7.335,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"}],"frontMatter":{"title":"Introducing A Custom Chainlink Price Feed Solution For Web3 Apps","description":"Introducing LinkWell Nodes\' secure, reliable, and affordable custom Chainlink oracle price feed solution for on-chain smart contract updates.","date":"2024-05-30","image":"https://docs.linkwellnodes.io/img/.../img.png","keywords":["chainlink oracle","smart contracts","price feed","web3","blockchain"],"authors":["Ken"],"tags":["chainlink oracle","smart contracts","price feed","web3","blockchain"]},"prevItem":{"title":"Chainlink Node Operators: The Backbone of the Chainlink Network","permalink":"/blog/Chainlink-Node-Operator"},"nextItem":{"title":"How to Build and Deploy a Chainlink Smart Contract","permalink":"/blog/Build-And-Deploy-A-Chainlink-Smart-Contract"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>Introducing LinkWell Nodes\' custom Chainlink price feed solution for Web3 updates, detailing benefits and implementation for real-world data integration.</h2>\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/custom-price-feed/linkwell-custom-price-feed.webp\\" alt=\\"LinkWell Nodes\' Custom Price Feed Solution\\" />\\n</p>\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**On this page**:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={2}\\n/>\\n\\n---\\n\\n## Introduction\\n\\nDeFi and the greater Web3 space would not be where it is today without access to reliable, accurate, and secure price data.\\n\\nChainlink, the leading Web3 services platform renowned for its off-chain data, computation, and cross-chain connectivity, offers price feed data as one of its core service offering. These feeds, supported by independent Chainlink oracles operating within decentralized oracle networks (DONs), have been delivering highly secure and reliable price data to countless Web3 applications since their launch in 2019. Despite the robustness of Chainlink\'s protocols and the trust-minimized DONs that underpin these services, however, there is one limitation - the sheer number of potential price pairs and use cases far exceeds what Chainlink is currently supporting.\\n\\nAt [LinkWell Nodes](https://docs.linkwellnodes.io/about), we\'ve stepped up to extend the reach of this vital technology. Our custom Chainlink price feed solution is designed to bridge the gaps of Chainlink\'s official price feeds, providing reliable, accurate, and secure data for even the most specialized or emerging use cases. Whether it\u2019s a niche markets, unique asset classes, or bespoke economic indicators, our custom price feed solution ensures that your DeFi project has the data that it needs.\\n\\nIn this article, we\'ll explore how Chainlink\'s price feeds work, how ours differ, what the benefits are, and how to get started.\\n\\n<center><iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/-pJqlI61ZKc\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe></center>\\n\\n## How Chainlink\'s Official Price Feeds Work\\n\\nChainlink Price Feeds, as listed via their [data feeds page](https://data.chain.link/feeds), are powered by decentralized oracle networks that deliver accurate, up to date asset price data to smart contracts across various blockchain platforms and price pairs. They utilize a network of independent, security-reviewed node operators who gather data from multiple premium data providers. \\n\\nThis multi-source approach ensures comprehensive market coverage and protects against single points of failure and data manipulation. Once collected, the data is aggregated to form a consensus price, which is then securely transmitted on-chain to an aggregation contract.\\n\\n![Chainlink Price Feed DON](/img/custom-price-feed/chainlink-price-feed.webp \\"Official Chainlink Price Feed Decentralized Oracle Network\\")<center><small>Credit: [blog.chain.link](https://blog.chain.link/chainlink-price-feeds-secure-defi/)</small></center>\\n\\nThe cost of using Chainlink Price Feeds is typically covered by the smart contract developers or the project/teams that utilize these feeds within their applications. These users pay for, or sponsor, the network fees associated with retrieving data from the oracles. The payment is generally made in the form of LINK tokens, which are used to compensate the node operators for their services in retrieving, aggregating, and delivering the data.\\n\\nWhile this model provides the most robust security and reliability assurances among Web3 price feed solutions - and we strongly recommend using Chainlink\'s price feeds when suitable - emerging Web3 projects needing a price feed not currently supported by Chainlink face challenges with getting their data on-chain. As noted earlier, initiating and sponsoring a new price feed involves expenses. Security budgets for newer teams are frequently constrained, which can lead to concerns about the affordability of funding new feeds or push them to consider alternative oracle providers - a course of action we advise against for a number of reasons.\\n\\nThis is where our custom price feed solution comes into play, which we will introduce in the following sections.\\n\\n## LinkWell Nodes\' Custom Price Feed Solution\\n\\nAs innovators in the Chainlink oracle space with extensive experience working alongside various Web3 teams, we identified a growing need for a price feed solution that could be seamlessly integrated to supply accurate pricing data for any asset.\\n\\nOur custom price feed solution operates in a similar manner to Chainlink\'s official price feeds - data is aggregated from various data providers and \\"pushed\\" on-chain when certain conditions are met, such as a heartbeat timer or a deviation threshold is crossed. Additionally, our solution can accomodate any number of data sources required, providing decentralization at the data source layer.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/custom-price-feed/linkwell-custom-price-feed.webp\\" alt=\\"LinkWell Nodes\' Custom Price Feed Solution\\" />\\n</p>\\n\\nThere are two key differences from Chainlink\'s official price feeds, however, that are worth mentioning:\\n\\n1. Price updates are pushed directly to your smart contract, whereas Chainlink\'s price feeds push updates to a publicly available on-chain aggregation contract.\\n\\n2. Given the specialized design and unique logic needed for this price feed solution, it operates exclusively through a singular oracle network provided by us at LinkWell Nodes.\\n\\nThe sole requirement to integrate our price feed solution into your contract is to provide a contract address, function name, and function signature that includes input variables. Below is an example:\\n\\n``` solidity\\n    uint256 public oracleResult;\\n    // Receive the result from the Chainlink oracle\\n    // Only the oracle can call this function\\n    function fulfill(uint256 _data) external onlyOracle {\\n        oracleResult = _data;\\n    }\\n```\\n\\nOnce configured, our price feeds can be adjusted at any time to modify the deviation threshold or heartbeat timer - the two primary methods for facilitating on-chain updates.\\n\\n> _In need of a trust-minimized solution? We provide a custom price feed capability that can support a DON architecture using multiple independent Chainlink oracles. If you\'d like to speak directly with Chainlink Labs regarding your data feed requirements, feel free to contact them [here](https://chain.link/contact?ref_id=datafeeds) for further assistance._\\n\\n## Benefits of Our Custom Chainlink Price Feed Solution\\n\\nOur custom price feed solution offers a number of benefits to include:\\n\\n1. **Any Price Pair**: Our Chainlink price feed solution can accommodate any price feed your Web3 application requires, provided our infrastructure can access the data over the internet. Additionally, our solution is versatile, supporting not only price updates but any integer-based value as well, such as for proof of reserve.\\n\\n2. **Secure and Reliable**: Our Chainlink oracles are distributed across various geographically distinct data centers, ensuring high uptime and reliability. Additionally, we offer robust security assurances and a [Service Level Agreement](https://docs.linkwellnodes.io/services/direct-request-jobs/Service-Level-Agreement) (SLA) for ensuring the reliability and security of your data.\\n\\n3. **Affordable**: A key advantage of our custom price feed updates is the reduced gas costs for submitting updates on-chain, which enables us to pass these savings onto our users. Additionally, we operate Chainlink oracles on testnets where we offer to trial or test the solution at no cost to you.\\n\\n4. **Flexible Payments**: On top of affordability, we also provide various payment methods - an upfront payment subscription model that can accept payment across multiple currencies, or the traditional model of paying for each request in the form of the LINK token.\\n\\n5. **Rapid Deployment**: From the moment you reach out to us, we can have this solution up and running within a day. This can be particularly valuable for teams in need of an immediate price feed solution.\\n\\n6. **Full-Service Support**: We are happy to support the price feed integration process every step of the way. Additionally, we carefully monitor our infrastructure along with the custom price feed for any issues or anomalous activity.\\n\\n## How to Get Started\\n\\nWe\'ve gone through great lengths to make the integration process as seamless as possible - all you have to do is reach out! We can be contacted via [Discord](https://discord.com/invite/Xs6SjqVPUA), [Twitter](https://x.com/LinkWell_Nodes), [Email](mailto:hello@linkwellnodes.io?subject=Website%20inquiry), or simply fill out our [request survey form](https://linkwellnodes.io/Getting-Started.html) to get started.\\n\\nShould you choose to contact us, all we request that you send us is the network you wish to deploy on, your data requirements (ie price pair, data sources, etc.), update frequencies needed for your Web3 application\'s use case, and the timeline in which you require the price feed.\\n\\n## Conclusion\\n\\nIn an ideal scenario, Chainlink\'s price feeds, powered by their trust-minimized decentralized oracle networks, would support every conceivable price pair or use case needed by Web3 applications.\\n\\nAlthough this could become a reality in the future - a future we eagerly anticipate - we hope that our custom price feed solution can help fill in the gaps by offering tailored data services that adapt to specific needs not yet covered by Chainlink\'s existing offerings. \\nAs passionate developers and members of the Chainlink community ourselves, nothing brings us more satisfaction than bringing a Web3 application to life with the data it needs to not only thrive and succeed.\\n\\nHappy building!\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/Build-And-Deploy-A-Chainlink-Smart-Contract","metadata":{"permalink":"/blog/Build-And-Deploy-A-Chainlink-Smart-Contract","source":"@site/blog/Build-And-Deploy-A-Chainlink-Smart-Contract/index.md","title":"How to Build and Deploy a Chainlink Smart Contract","description":"How to connect your smart contract to the internet using a Chainlink oracle.","date":"2024-05-22T00:00:00.000Z","formattedDate":"May 22, 2024","tags":[{"label":"chainlink oracle","permalink":"/blog/tags/chainlink-oracle"},{"label":"smart contracts","permalink":"/blog/tags/smart-contracts"},{"label":"price feed","permalink":"/blog/tags/price-feed"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"}],"readingTime":9.48,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"}],"frontMatter":{"title":"How to Build and Deploy a Chainlink Smart Contract","description":"How to connect your smart contract to the internet using a Chainlink oracle.","date":"2024-05-22","image":"https://docs.linkwellnodes.io/img/.../img.png","keywords":["chainlink oracle","smart contracts","price feed","direct requests","any api","web3","blockchain"],"authors":["Ken"],"tags":["chainlink oracle","smart contracts","price feed","web3","blockchain"]},"prevItem":{"title":"Introducing A Custom Chainlink Price Feed Solution For Web3 Apps","permalink":"/blog/Custom-Chainlink-Price-Feed-Solution"},"nextItem":{"title":"LinkWell Nodes joins the Allora Network as a Validator","permalink":"/blog/LinkWell-Nodes-Joins-the-Allora-Network-as-a-Node-Operator"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>How to write, compile, and deploy a smart contract that uses Chainlink to retrieve data from the internet.</h2>\\n\\n![How to Deploy a Chainlink Smart Contract with MetaMask](/img/ethgrid.webp \\"How to Deploy a Chainlink Smart Contract with MetaMask\\")<center><small>Credit: [simplilearn.com](https://www.simplilearn.com/tutorials/blockchain-tutorial/what-is-smart-contract)</small></center>\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**On this page**:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={2}\\n/>\\n\\n---\\n\\n## Introduction\\n\\nIn this guide, we\'ll show you how to build and deploy a smart contract that retrieves real-time price info (or any other data) using the Chainlink direct request model. For illustration purposes, we\'ll deploy our contract to the **Base Sepolia testnet** network, but any of our [supported networks](/services/direct-request-jobs/Jobs-and-Pricing) can be used with this tutorial. \\n\\n> *Without access to real-world data, many dApps simply wouldn\'t exist. Fortunately, [Chainlink](https://chain.link/) - the leading Web3 services platform - provides numerous options for retrieving data from the internet, off-chain compute, and even other blockchains.*\\n\\n*Related video*: What is a smart contract?\\n<center><iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/pWGLtjG-F5c\\" title=\\"What is a smart contract?\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe></center>\\n\\n## Prerequisites\\n\\nHere are some things you\'ll need in order to follow this tutorial:\\n\\n* **A Web3 Wallet**: Web3 wallets are required for not only storing your tokens, but also for deploying your smart contracts and signing blockchain transactions. Examples include [MetaMask](https://metamask.io/) and [Coinbase Wallet](https://www.coinbase.com/wallet).\\n\\n* **An EVM-compatible IDE**: An Integrated Development Environments (IDE) that works with EVM-based blockchains is required for deploying and testing your smart contract. One such popular tool is [Remix](https://remix.ethereum.org/#lang=en&optimize=false&runs=200&evmVersion=null), but advanced users may prefer a development framework such as [Foundry](https://docs.chain.link/quickstarts/foundry-chainlink-toolkit), particularly for more complex projects.\\n\\n* **A Chainlink oracle**: Chainlink oracles are cloud-based runtimes that connect smart contracts to the physical world. They are typically operated by reputable companies with a well-defined [SLA (Service-Level Agreement)](/services/direct-request-jobs/Service-Level-Agreement), and are highly secure, redundant, and resilient to attack. Chainlink oracles act as bridges, allowing blockchain applications to access off-chain compute, internet APIs (ie, weather, stock prices, and sports betting data, flight information, etc.), or even other blockchains.\\n\\n:::tip\\n### Looking for a Chainlink oracle? \\n\\nLinkWell Nodes offers Chainlink oracle services on all major EVM-based mainnet and testnet blockchains. To view a directory of our oracle addresses and job IDs, please feel free to view our [Chainlink data feeds documentation](/services/direct-request-jobs/Jobs-and-Pricing).\\n:::\\n\\n## **Step 1**: Set up and fund MetaMask\\n\\nTo deploy smart contracts on-chain, you\'ll first need a wallet and some of the respective chain\'s **native gas token** (the token used to pay for transactions on the blockchain). Since we\'ll be using Base network for this tutorial, we\'ll fund our wallet with `ETH`.\\n\\nYou can skip this section if you already have a Web3 wallet installed and have the appropriate gas token.\\n\\n*Related video*: What is MetaMask?\\n<center><iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/-HTubEJ61zU\\" title=\\"What is MetaMask?\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe></center>\\n\\n\\n1. [Download and install MetaMask](https://support.metamask.io/getting-started/getting-started-with-metamask/#how-to-install-metamask) within your browser.\\n\\n    ![Download MetaMask for your Browser](./mm_extension.webp \\"Download MetaMask for your Browser\\")\\n\\n2. Add your required blockchain network to MetaMask:\\n\\n    **2a.** Navigate to [Chainlist](https://Chainlist.org). \\n    \\n    **2b.** Click **Connect your wallet**.\\n    \\n    **2c.** Search for your desired network, and click **Add to Metamask**.\\n\\n    **2d.** In the resulting popup screen, hit **Approve**.\\n    \\n    *NOTE: You can also enter your network info manually within MetaMask if you have it handy, by going to **Settings** -> **Networks** -> **Add a network**:*\\n\\n    ![Configure MetaMask to Connect to Base Sepolia](./mm_base_sepolia_network.webp \\"Configure MetaMask to Connect to Base Sepolia\\")\\n\\n3. Fund your MetaMask wallet with gas tokens. If deploying to a testnet, you can acquire gas tokens for your desired network using the [Chainlink Faucet](https://faucets.chain.link/).\\n\\n    ![Connect to a Faucet to Receive Testnet Gas Tokens](./chainlink_faucet.webp \\"Connect to a Faucet to Receive Testnet Gas Tokens\\")\\n\\n## **Step 2**: Write, compile, and deploy your Chainlink smart contract\\n\\nIn the following steps, you\'ll write, compile, and deploy a smart contract that fetches price data (a single `uint256` object) from the [CryptoCompare API](https://min-api.cryptocompare.com/) (free to use). The sample code below shows how to create a basic smart contract that makes on-demand requests to a Chainlink oracle for the price of **ETH** in USD.\\n\\n:::info\\nOur Chainlink oracle jobs support all data types, from any API provider. Feel free to browse our [request documentation](/services/direct-request-jobs/Jobs-and-Pricing) for more information on how to cater your request to your exact data type.\\n:::\\n\\n1. The first step is to copy the below contract into the **Remix IDE**. For ease of use, you can [open the contract directly in Remix](https://remix.ethereum.org/#activate=github&url=https://github.com/LinkWellNodes/Documentation/blob/main/docs/services/direct-request-jobs/testnets/Base-Sepolia/uint256/uint256.sol&lang=en&optimize=false&runs=200&evmVersion=null). \\n\\n    ```sol reference\\n    https://github.com/LinkWellNodes/Documentation/blob/main/docs/services/direct-request-jobs/testnets/Base-Sepolia/uint256/uint256.sol\\n    ```\\n\\n    :::tip\\n    *Please pay special note to the constructor function, as its contents vary by Chainlink oracle, network, and data type.*\\n    \\n    *The above sample constructor is preconfigured to point to LinkWell Nodes\'s [Base Sepolia testnet uint256 oracle](https://docs.linkwellnodes.io/services/direct-request-jobs/testnets/Base-Sepolia-Testnet-Jobs?dataType=Uint256) - **you will need to edit it for your desired network and data type using our [request documentation](/services/direct-request-jobs/Jobs-and-Pricing)**.*\\n    :::\\n\\n2. Use the default compiler settings for this contract. Click the **Compile uint256.sol** button to convert the Solidity code into bytecode that the [Ethereum Virtual Machine (EVM)](https://ethereum.org/en/developers/docs/evm/) can understand.\\n\\n    ![Open the Sample Github Code and Click Compile](./remix_solidity_compiler.webp \\"Open the Sample Github Code and Click Compile\\")\\n\\n3. Now it\'s time to deploy the contract. Navigate to the **Deploy and run transactions** button on the left-hand sidepanel.\\n\\n4. The next step is to configure the Remix environment to connect to your MetaMask wallet. You\'ll need to ensure that MetaMask is currently connected to the blockchain network of your choice.\\n\\n    ![Connect Remix to Your MetaMask Wallet](./remix_connect_to_metamask.webp \\"Connect Remix to Your MetaMask Wallet\\")\\n\\n    Under **Environment**, click **Injected Provider - MetaMask**. This will open up a MetaMask window that provides a few prompts to connect to Remix.\\n\\n5. Next, you\'ll click the orange deploy button. This deploys the smart contract to the Base Sepolia testnet.\\n\\n    ![Deploy the Smart Contract to your Target Blockchain Network](./remix_smart_contract_deploy.webp \\"Deploy the Smart Contract to your Target Blockchain Network\\")\\n\\n6. Deploying the contract opens a MetaMask prompt, which requests that you confirm the transaction. After a short period waiting period (typically a few blocks), your contract will be officially deployed to the blockchain!\\n\\n    ![Confirm the Smart Contract Deployment Transaction in your Web3 Wallet](./mm_confirm_txn_contract_deploy.webp \\"Confirm the Smart Contract Deployment Transaction in your Web3 Wallet\\")\\n\\n**Your contract is now deployed!** \\n\\nJust like your MetaMask wallet, your new contract will have its own unique address on the blockchain. You can view the contract within your related blockchain explorer (ie, the [Base Sepolia block explorer](https://sepolia.basescan.org/)) by pasting your new contract address into the block explorer.\\n\\n## **Step 3**: Execute your Chainlink oracle request \\n\\nNow let\'s request data from the Chainlink oracle!\\n\\n1. In Remix, expand the contract that you just deployed (you\'ll see it under **Deployed/Unpinned Contracts**). You should see a number of different buttons that are highlighted in blue and orange - each of which represent a function within your smart contract. \\n    \\n    * The **blue** buttons represent `view` or `pure` functions, which are read-only and do not modify the blockchain state. These functions do not require gas fees to execute. \\n    \\n    * The **orange** buttons represent functions that modify the blockchain state, such as those that change variables or send transactions. These functions require gas fees to execute.\\n\\n    ![Explore the Smart Contract\'s Functions](./contract_view_functions.webp \\"Explore the Smart Contract\'s Functions\\")\\n\\n1. Click the `response` button, which should initially show `0`, since you haven\'t made an on-demand oracle request yet.\\n\\n1. **Fund your contract**: If making your request on a **mainnet** blockchain, you\'ll need to send some LINK tokens to your deployed contract address. This allows a small payment in LINK to be sent with each oracle request, in order to compensate the Chainlink oracle for the gas required to write your response on-chain. The amount of this payment is governed by the `setFeeInHundredthsOfLink(0);` line in your constructor function, but must match the amount specified by your Chainlink oracle, or the request will fail.\\n\\n    :::info\\n    You can skip this step on testnets, as our request fee is set to 0 LINK.\\n    :::\\n    \\n    :::tip\\n    At LinkWell Nodes, we allow for alternate payment currencies, and discounts for up-front payments, offering you the option to pay for your requests in ETH, USDC, or even fiat.\\n    :::\\n\\n1. **Make the oracle request**: Click the orange `request` button. This initiates an on-demand request to the specified Chainlink oracle, and will open up another MetaMask prompt that will require you to confirm the blockchain \'oracle request\' transaction. Click \'Approve\' in MetaMask to submit the transaction, and send the required payment (if any) to your oracle.\\n\\n    ![Execute the Request Function](./oracle_request_function.webp \\"Execute the Request Function\\")\\n\\n1. Within **3-5 blocks** (depending on your chosen blockchain), the Chainlink oracle will update the `response` variable in your contract with the latest price of Ethereum, denominated in USD. Click the `response` button again to view your result.\\n\\n    ![View the Updated Response Variable](./response_variable_udpated.webp \\"View the Updated Response Variable\\")\\n\\n    :::info\\n    Take note that the CryptoCompare URL specified in the request function provides a JSON response of the ETH value with decimals (ie **3833.23**.).  Due to the fact that decimals do not work in Solidity, the **3833.23** value is multiplied by a large amount (governed by the `req._addInt(\'multiplier\', 10 ** 18);` line in your contract), in order to remove the decimals before writing the value on chain.\\n    :::\\n\\n    :::tip\\n    **Having trouble with your request?** Check our [Chainlink Direct Requests FAQ](/knowledgebase/faq/Chainlink-Users#chainlink-direct-requests), or reach out to us in [Discord](https://discord.gg/Xs6SjqVPUA) if you require assistance with this request.\\n\\nNow that the latest Ethereum price is stored in a variable in your contract, you can execute additional logic based on this updated value, such as:\\n\\n* **Executing trades**: Automatically buy or sell assets based on predefined price conditions.\\n* **Issuing stablecoins**: Adjust the supply of a stablecoin to maintain its peg relative to Ethereum\'s price.\\n* **Updating DeFi protocols**: Adjust interest rates or collateral requirements in decentralized finance applications.\\n* **Triggering payments**: Send payments or rewards when Ethereum reaches certain price milestones.\\n* **Minting NFTs**: Automatically mint or update NFTs based on the data received from your Chainlink request.\\n\\n> _Making an on-demand request to a Chainink oracle is one of several options that we support for updating variables within your smart contract. We also offer automatic updates at **set frequencies**, **% deviations in value**, or other trigger conditions. If interested in learning more about our various Chainlink services, head on over to our [documentation](/) to find out more._\\n\\nInterested in diving deeper into the process of making a direct (on-demand) Chainlink oracle request? Please refer to our [developer documentation](https://docs.linkwellnodes.io/knowledgebase/Direct-Request-Guide) for details.\\n\\n\\n## Conclusion\\n\\nDeploying your Chainlink-connected smart contract on any network is easy, and is a powerful way to integrate real-world information into your decentralized application. By following this tutorial, you\'ve learned how to set up a Web3 wallet along with your development environment, write and compile a smart contract, and make a direct request to LinkWell Nodes\'s oracle services. \\n\\nWe hope that this tutorial has provided you with a strong foundation for creating dynamic and responsive Web3 applications, ultimately enabling you to harness the full potential of blockchain technology.\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/LinkWell-Nodes-Joins-the-Allora-Network-as-a-Node-Operator","metadata":{"permalink":"/blog/LinkWell-Nodes-Joins-the-Allora-Network-as-a-Node-Operator","source":"@site/blog/LinkWell-Nodes-Joins-the-Allora-Network-as-a-Node-Operator/index.md","title":"LinkWell Nodes joins the Allora Network as a Validator","description":"Learn more about the partnership between LinkWell Nodes and the Allora Network.","date":"2024-05-09T00:00:00.000Z","formattedDate":"May 9, 2024","tags":[{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"},{"label":"node operator","permalink":"/blog/tags/node-operator"},{"label":"validator","permalink":"/blog/tags/validator"},{"label":"allora network","permalink":"/blog/tags/allora-network"},{"label":"ai","permalink":"/blog/tags/ai"}],"readingTime":4.9,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"},{"name":"Derek Ricciuto","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/derek-ricciuto","imageURL":"/img/derek-ricciuto-100x100.webp","key":"Derek"}],"frontMatter":{"title":"LinkWell Nodes joins the Allora Network as a Validator","description":"Learn more about the partnership between LinkWell Nodes and the Allora Network.","date":"2024-05-09","image":"https://docs.linkwellnodes.io/img/lwn-joins-allora/allora__linkwell_nodes.png","keywords":["web3","blockchain","node operator","validator","allora network","ai"],"authors":["Ken","Derek"],"tags":["web3","blockchain","node operator","validator","allora network","ai"]},"prevItem":{"title":"How to Build and Deploy a Chainlink Smart Contract","permalink":"/blog/Build-And-Deploy-A-Chainlink-Smart-Contract"},"nextItem":{"title":"Finding a Chainlink Oracle: A Guide for Web3 Developers","permalink":"/blog/How-To-Find-A-Chainlink-Oracle"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>Learn more about the partnership between LinkWell Nodes and the Allora Network.</h2>\\n\\n![LinkWell Nodes Allora Network Partnership](/img/lwn-joins-allora/allora__linkwell_nodes.webp \\"LinkWell Nodes Allora Network Partnership\\")\\n\\n\x3c!-- truncate --\x3e\\n\\n:::tip\\n### Looking to stake your ALLO tokens? \\n\\nVisit our [staking page](/services/staking/Allora) to earn ALLO (Allora token) by staking your ALLO within our state-of-the-art validator infrastructure.\\n:::\\n\\n## Announcement\\n\\nLinkWell Nodes has joined the group of validators that help secure the Allora Network. As a U.S.-based Web3 infrastructure company, LinkWell Nodes specializes in delivering Chainlink oracle data feeds and secure blockchain node deployments. Holding true to its core tenet of being a Web3 global citizen, LinkWell Nodes powers 95% of its infrastructure using renewable energy, and will reach 100% by next year. LinkWell Nodes operates server infrastructure across several physically-distinct cloud data centers, with its primary center-of-operations located in the northwestern United States. Using infrastructure-as-code (IaC), LinkWell Nodes is able to ensure robust scalability, disaster recovery, and 24/7 monitoring across all of its highly-available blockchain infrastructure.\\n\\nWith an extensive track record operating custom Chainlink data feeds on 14 blockchains (at the time of this writing), LinkWell Nodes is uniquely positioned to help the Allora Network establish a strong foundation by deploying itself as a node operator in the early days of the network.\\n\\n> *\\"At LinkWell Nodes, we\'re cognizant of the artificial intelligence movement and the opportunity it represents for transforming societal progress and outcomes,\\"* says LinkWell Nodes co-founder [Ken Reiners](https://www.linkedin.com/in/ken-reiners-755806167/). *\\"However as a Web3 company, we also recognize the importance of ensuring that access to such tools stays in the hands of the many, and that their evolution, growth, and ownership remains decentralized and transparent. To us, the Allora Network represents the consummation of these two ideals. Together with our extensive experience running reliable blockchain node infrastructure, joining the Allora Network as a validator was a no-brainer for us.\\"*\\n\\n## Evolution of the Allora Network and LinkWell Nodes\\n\\nAI is the most deflationary, expressive form of computation to ever exist, and can intelligently process large amounts of information. For the past 3 years, Allora Labs (formerly known as Upshot) has been building AI-powered crypto infrastructure to power new applications and protocols in gaming, lending, market making, and more. Models built by the Allora Labs team have effectively produced price predictions for more than 400 million assets with a 95-99% confidence for the most accurate predictions.\\n\\nThe team\'s earlier work in subjective consensus mechanism design, along with learnings gathered from building AI-powered crypto infrastructure, led them to create the Allora Network, a self-improving decentralized AI network that harnesses both the efficiency of AI and the wisdom of the collective to reach one mission: transform intelligence itself into a digital commodity.\\n\\nAs an Allora node operator, LinkWell Nodes furthers that mission by operating both a validator to secure the Allora chain and a Reputer to rate the performance of the ML models delivered by Allora Workers, performing a critical service that reinforces the self-improvement mechanism of Allora.\\n\\n> *\\"Collaborating with veteran secure systems builders like LinkWell Nodes is crucial to the success of Allora,\\"* says [Nick Emmons](https://twitter.com/nick_emmons), Co-Founder of Allora Labs. *\\"Ken and his team\'s dedication to secure blockchain infrastructure directly contributes to the growth and security of the network.\\"*\\n\\n## Why LinkWell Nodes Chose the Allora Network\\n\\nAs a company at the forefront of web3 infrastructure development, LinkWell Nodes seeks to support the growth of cutting-edge protocols that drive net-new use cases. In pursuit of this goal, the company sought a versatile solution that would allow it to focus on creating innovative infrastructure tools.\\n\\nAfter a comprehensive review of available networks, LinkWell Nodes chose to integrate with Allora due to the network\'s unique benefits:\\n\\n* **Collective Intelligence**: Models in Allora\'s network continuously learn from each other, enhancing its collective intelligence and enabling it to self-improve over time.\\n\\n* **Context-Awareness**: Network participants forecast each other\'s performance under the current conditions, thereby creating a form of context-awareness that enables the network to achieve the best inferences under any circumstances.\\n\\n* **Tamper-Proof Outputs**: Allora utilizes [zkML](https://www.alloralabs.xyz/) and cryptographic verification to create outputs that are verifiably secure and unalterable, ensuring trust in AI\'s decisions.\\n\\n* **Universal Access**: Allora offers permissionless, composable access to AI, enabling builders everywhere to innovate and create with AI as a foundational element.\\n\\n* **Balanced Outcomes**: Allora leverages diverse data inputs to reduce bias, leading to more balanced and fair AI-driven outcomes.\\n\\n## About LinkWell Nodes\\n\\nLinkWell Nodes is a U.S.-based Web3 infrastructure company specializing in Chainlink oracle services and secure blockchain node architecture. With over 25 years of combined experience in the cybersecurity, cloud infrastructure, financial services, and Web3 industries, LinkWell Nodes is dedicated to building a world powered by trustless, cryptographic truth.\\n\\nTo learn more about LinkWell Nodes, visit the [website](https://linkwellnodes.io/), [Twitter](https://twitter.com/LinkWell_Nodes), [Medium](https://medium.com/linkwell-nodes), [Discord](https://discord.com/invite/Xs6SjqVPUA), and [developer documentation](https://docs.linkwellnodes.io/).\\n\\n## About the Allora Network\\n\\nAllora is a self-improving decentralized AI network.\\n\\nAllora enables applications to leverage smarter, more secure AI through a self-improving network of ML models. By combining innovations in crowdsourced intelligence, reinforcement learning, and regret minimization, Allora unlocks a vast new design space of applications at the intersection of crypto and AI.\\n\\nTo learn more about the Allora Network, visit the [Allora website](https://www.allora.network/), [Twitter](https://twitter.com/AlloraNetwork), [Medium](https://medium.com/allora-network), and [Discord](https://discord.com/invite/allora).\\n\\n:::tip\\n### Ready to stake your ALLO (Allora) token? \\n\\nHead on over to our [staking page](/services/staking/Allora) to earn ALLO staking your tokens within our state-of-the-art validator.\\n:::\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/How-To-Find-A-Chainlink-Oracle","metadata":{"permalink":"/blog/How-To-Find-A-Chainlink-Oracle","source":"@site/blog/How-To-Find-A-Chainlink-Oracle/index.md","title":"Finding a Chainlink Oracle: A Guide for Web3 Developers","description":"Where to find a Chainlink oracle, oracle address, job ID, or node operator for incorporating real-world data into your Web3 application.","date":"2024-04-22T00:00:00.000Z","formattedDate":"April 22, 2024","tags":[{"label":"chainlink oracle","permalink":"/blog/tags/chainlink-oracle"},{"label":"smart contracts","permalink":"/blog/tags/smart-contracts"},{"label":"price feed","permalink":"/blog/tags/price-feed"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"},{"label":"node operator","permalink":"/blog/tags/node-operator"}],"readingTime":9.815,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"},{"name":"Derek Ricciuto","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/derek-ricciuto","imageURL":"/img/derek-ricciuto-100x100.webp","key":"Derek"}],"frontMatter":{"title":"Finding a Chainlink Oracle: A Guide for Web3 Developers","description":"Where to find a Chainlink oracle, oracle address, job ID, or node operator for incorporating real-world data into your Web3 application.","date":"2024-04-22","image":"/img/node-opp-oracle-article/","keywords":["chainlink oracle","smart contracts","price feed","web3","blockchain","node operator"],"authors":["Ken","Derek"],"tags":["chainlink oracle","smart contracts","price feed","web3","blockchain","node operator"]},"prevItem":{"title":"LinkWell Nodes joins the Allora Network as a Validator","permalink":"/blog/LinkWell-Nodes-Joins-the-Allora-Network-as-a-Node-Operator"},"nextItem":{"title":"Chainlink Price Feeds: Building a Custom Flux Monitor DON","permalink":"/blog/Build-A-Chainlink-Price-Feed-With-Flux-Aggregator"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>Where to find a Chainlink node operator, oracle address, and job ID for writing real-world data to your Web3 application.</h2>\\n\\n![What is a Chainlink Node Operator](/img/link-electric.webp \\"What is a Chainlink Node Operator\\")<center><small>Credit: [https://dailyhodl.com](https://dailyhodl.com/2022/01/06/chainlink-link-approaching-decision-time-according-to-crypto-analyst-benjamin-cowen-heres-why)</small></center>\\n\\n\x3c!-- truncate --\x3e\\n\\n## Introduction\\n\\nDevelopers building Web3 applications are faced with a series of challenging hurdles - selecting the appropriate blockchain, maximizing security, and integrating off-chain data into their smart contracts using oracle platforms like Chainlink.\\n\\n:::tip\\n### Looking for a Chainlink oracle, oracle address, or job id?\\nView our [Chainlink data feeds documentation](/services/direct-request-jobs/Jobs-and-Pricing), which has everything you need to get started requesting data from our reliable, distributed oracle infrastructure.\\n:::\\n\\nAt LinkWell Nodes, we understand the inherent challenge in staying up-to-date on Chainlink\'s service offerings, as well as the considerable difficulty in finding and collaborating with the appropriate Chainlink node operator. In this article, we aim to use our extensive experience running Chainlink oracles to help clarify these unknowns.\\n\\nIn this article we will cover:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={2}\\n/>\\n\\n> ** *Why Chainlink?* **\\n>\\n> *Blockchain consensus mechanisms limit smart contracts from directly interacting with the internet, creating the blockchain [oracle problem](https://chain.link/education-hub/oracle-problem). This hurdle represents one of the greatest limitations to representing everyday contracts on the blockchain.*\\n>\\n> *Hybrid smart contracts solve this by using oracles as middleware - enabling external data publishing & retrieval, and scalable off-chain computations. Oracles act as a two-way bridge, enhancing connectivity while providing security against single points of failure.*\\n>\\n> *Chainlink - the industry standard Web3 services platform - is the most widely used decentralized oracle network, securing significant value across a diverse assortment of blockchains and use cases. It operates as an ecosystem with independent decentralized oracle networks, guaranteeing robust and versatile oracle services.*\\n\\n## What is a Chainlink oracle (node operator)?\\n\\nA [Chainlink node operator](https://blog.chain.link/what-is-a-chainlink-node-operator/) is a crucial part of the Chainlink network, tasked with the secure and reliable transfer of real-world data to blockchains. These operators develop and maintain their own off-chain infrastructure, which effectively serves as a bridge between external data sources (internet-based APIs), and blockchains. This crucial connection enables bi-directional communication between smart contracts and the outside world.\\n\\nAt the heart of this system is the **Chainlink oracle** - a runtime developed in Go by [Chainlink Labs](https://chainlinklabs.com/). Oracles form the backbone of decentralized oracle networks (DONs), which supply off-chain data and computational resources to support a wide range of Chainlink\'s functionalities, including Data Feeds, Automation, VRF, and the Cross-Chain Interoperability Protocol (CCIP). The Chainlink network is an expandable ensemble of independent oracles. While anyone can run their own singular Chainlink oracle, decentralized oracle networks can impose their own rules regarding access and data handling. Unlike typical blockchain environments, the Chainlink network does not employ a unified consensus mechanism, thereby allowing for greater flexibility (and decentralization) among its networks.\\n\\nWhile individual Chainlink oracles can directly handle requests (ie, using the [Any API / basic request model](/blog/Chainlink-Basic-Request-Model-Architectures)), they may also form decentralized oracle networks (DONs). These networks aggregate responses from multiple oracles and data sources, ultimately providing a highly secure, accurate, and reliable data feed.\\n\\n![Decentralized Oracle Network Price Feed Example](/img/chainlink-oracle/Chainlink_Oracle_Network.webp \\"Decentralized Oracle Network Price Feed Example\\")<center><small>Credit: https://chain.link/data-feeds</small></center>\\n\\n## Why do I need a Chainlink oracle?\\n\\nIt would be natural to question at this point - if Chainlink oracles can offer their services via decentralized oracle networks, why would there be any need to interact with a single Chainlink oracle?\\n\\nThere are many reasons why interacting directly with a Chainlink node operator (oracle) can be extremely beneficial - or even necessary:\\n\\n**1. Direct API Calls:** Web3 developers can incorporate request logic within their smart contracts that execute API calls via a Chainlink oracle, allowing them to access data from any external data source on the internet. This process necessitates an [oracle address and a job id](/services/direct-request-jobs/Jobs-and-Pricing), both of which are provided by a Chainlink node operator (see [our documentation](/services/direct-request-jobs/Jobs-and-Pricing) for these).\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/chainlink-oracle/Chainlink_Basic_Request_Model.webp\\" alt=\\"Using Chainlink\'s basic request model for Any API Integrations\\" title=\\"Using Chainlink\'s basic request model for Any API Integrations\\" />\\n</p>\\n\\n**2. Lower Costs:** Working directly with a single Chainlink node operator can often be cheaper for your project than working with many. Speaking directly with your Chainlink node operator allows you to arrive at a price point that works for you. Some operators (such as ourselves) also provide discounts for high request volume, paying in advance, and alternative payment methods for certain Web3 startups.\\n\\n**3. Unique Data/Price Feeds:** Chainlink provides a diverse selection of [official data feeds](https://data.chain.link/feeds), encompassing various data types like asset prices, reserve balances, NFT floor prices, and more. While these data feeds cover a broad spectrum, Web3 developers often require data that goes beyond Chainlink\'s existing official data feed offerings. To cater to these specialized needs, Chainlink node operators can create [custom price feeds](/blog/Build-A-Chainlink-Price-Feed-With-Flux-Aggregator) that can aggregate custom data such as low-cap asset prices, RWA (real-world asset) prices, stock prices, weather information, sports betting data, and proof-of-reserve information.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/chainlink-oracle/Custom_Chainlink_Flux_Aggregator.webp\\" alt=\\"Building custom Chainlink oracle price feeds with Flux Aggregator\\" title=\\"Building custom Chainlink oracle price feeds with Flux Aggregator\\" />\\n</p>\\n\\n> _Chainlink node operators can easily assist in developing your custom data feed, enabling Web3 developers to design and build their own decentralized oracle networks (DONs). These networks can be customized with specific update thresholds to aggregate data for virtually any use case._\\n\\n**4. Full-Service Support:** Working directly with a node operator means a vastly-improved customer experience - especially for teams with limited technical expertise with blockchain oracles. A node operator can provide a [wide range of services](/services/Development-Services), including customer support, assistance integrating your smart contract, external adapter development, and monitoring / alerting you to potential issues.\\n\\n**5. Reduced Technical Complexity:** The intricacies of building Web3 apps can be daunting. An experienced node operator team can provide you with the necessary guidance and support needed to navigate complex issues and technical decisions in integrating your contract safely with your external data.\\n\\n**6. Navigating Service Limitations:** Every blockchain (and Chainlink service offering) has its own inherent limitations - from gas limits to block times to payload sizes. A skilled Chainlink node operator can help you effectively navigate these challenges, providing alternative options and bespoke customer solutions where necessary.\\n\\n## **Where to find a Chainlink oracle**\\n\\nWhile there is no centralized directory of Chainlink node operators, there are several methods we recommend for finding one:\\n\\n1. **Node Operator Websites:** Visiting the websites of various Chainlink oracles can offer a comprehensive view of their services offerings and expertise. A quick Google search for \\"Chainlink oracle job ids\\" may yield several results.\\n\\n\\t> _LinkWell Nodes offers Chainlink oracle services on all major EVM mainnet and testnet blockchains._\\n\\t>\\n\\t> _To view a directory of our oracle addresses and job IDs, please feel free to view our [Chainlink data feeds documentation](/services/direct-request-jobs/Jobs-and-Pricing)._\\n\\n2. **Chainlink Discord server:** Engaging with the Chainlink community in Chainlink\'s official [Discord server](https://discord.com/invite/chainlink) is another great option for finding a Chainlink node operator who can serve your Web3 data needs.\\n\\n3. **Social Media:** Many Chainlink oracles are active on social media channels such as [X](https://twitter.com/LinkWell_Nodes), [LinkedIn](https://www.linkedin.com/company/80269483/), and [Discord](https://discord.com/invite/Xs6SjqVPUA).\\n\\n4. **Analytics Platforms:** Various independent websites such as LinkPool\'s Dune Analytics or Dextrac\'s Prism application offer detailed information on the performance of the Chainlink Network, each decentralized oracle network, various node operators, and more.\\n\\n## What to look for in a Chainlink oracle\\n\\nTrust is fundamental when working with a single Chainlink node operator - especially given the critical role that external data plays in smart contracts.\\n\\nSome of the key considerations to look for when finding a Chainlink node operator (oracle) are:\\n\\n1. **Reputation:** In a decentralized environment, a node operator\'s reputation for honesty and quality of service matters. Developers should choose Chainlink node operators with proven track records of excellent customer service.\\n\\n2. **Reliability and Uptime:** Reliable service is vital for applications needing real-time data, such as trading, lending, and DeFi insurance protocols. Look for a Chainlink node operator with a [well-defined SLA](/services/direct-request-jobs/Service-Level-Agreement) regarding their service and downtime.\\n\\n3. **Security:** Chainlink node operators manage sensitive data and may be the target of data breaches. Chainlink node operators should employ strong security measures to protect your data pipeline, and to prevent leaks that could jeopardize the blockchain ecosystem.\\n\\n4. **Compliance and Legal Considerations:** Trustworthy node operators should comply with legal and regulatory standards, critical in areas with strict data and privacy laws. This compliance prevents legal issues and ensures proper data handling.\\n\\nSome additional factors to consider are:\\n\\n* **Effective Communication:** Clear, transparent communication is essential for maintaining a seamless integration with Chainlink services, ultimately ensuring project success.\\n\\n* **Community Engagement:** Do they have a history of supporting the Chainlink community, and working with other Web3 projects? If not, they may not be the most suitable to work with.\\n\\n* **Clear Processes and Documentation:** We\'ve all experienced the dread of poor documentation and/or processes when trying to navigate a new technology. An oracle with clear documentation can make all the difference.\\n\\nWorking with a knowledgeable and competent Chainlink node operator can greatly streamline the process of requesting and building a custom data feed or Any API request pipeline, allowing you or your team to allocate resources more efficiently to your Web3 application. Furthermore, Chainlink node operators should ideally possess the expertise to assist in crafting your smart contract code, conducting code reviews, and suggesting gas optimization strategies within your smart contract. This not only saves time, but can also preserve valuable funds with each data request to the Chainlink oracle.\\n\\n> _At LinkWell Nodes, we pride ourselves in delivering a top-tier, transparent, full-service customer experience._\\n>\\n> _**Have a question about your Web3 project?** Join our [Discord server](https://discord.gg/Xs6SjqVPUA) for the fastest assistance._\\n\\n## Bonus: Chainlink\'s vision for a Decentralized Compute Marketplace (DCM)\\n\\nAt the 2023 SmartCon, Sergey Nazarov shared his vision for Chainlink to develop a **Decentralized Compute Marketplace** (DCM). This marketplace would enable users to allocate a security budget and obtain data, computation, and security services based on that budget. Such a development would make it easier for developers to establish custom DONs in order to integrate with Chainlink\'s comprehensive suite of Web3 services.\\n\\n![Chainlink_Decentralized_Compute_Marketplace](/img/chainlink-oracle/Chainlink_Decentralized_Compute_Marketplace.webp \\"Chainlink_Decentralized_Compute_Marketplace\\")<center><small>Credit: https://blog.chain.link/platform-for-verifiable-web/#a_manipulation-resistant_world_built_on_the_verifiable_web</small></center>\\n\\nAlthough the specifics of how the DCM will function remain uncertain, it seems likely that developers will have the option to choose not only the number of Chainlink oracles to service their DON, but also select *which* Chainlink oracles are part of the DON. Should Chainlink adopt this approach for the DCM, it will be important to understand the detailed metrics and information about each Chainlink node operator - as explored in this article.\\n\\n<center><iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/G8uWGzXHueo\\" frameborder=\\"0\\" allowfullscreen></iframe></center>\\n\\n## Conclusion\\n\\nThe journey to finding a suitable Chainlink oracle involves many challenges, including understanding the Chainlink ecosystem as a whole, and finding a Chainlink node operator that works for you.\\n\\nUnderstanding your project\'s specific needs, exploring various sources for potential candidates, and evaluating them based on performance metrics and other criteria, are some of the key challenges faced when finding a node operator.\\n\\nThe right operator will not only ensure the seamless integration of external data within your smart contract, but also save you time (and money), thereby contributing to the overall success of your Web3 project.\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/Build-A-Chainlink-Price-Feed-With-Flux-Aggregator","metadata":{"permalink":"/blog/Build-A-Chainlink-Price-Feed-With-Flux-Aggregator","source":"@site/blog/Build-A-Chainlink-Price-Feed-With-Flux-Aggregator/index.md","title":"Chainlink Price Feeds: Building a Custom Flux Monitor DON","description":"How to build and integrate a custom Chainlink oracle price feed using FluxAggregator for aggregating real-world data on-chain for your Web3 application.","date":"2024-03-16T00:00:00.000Z","formattedDate":"March 16, 2024","tags":[{"label":"chainlink oracle","permalink":"/blog/tags/chainlink-oracle"},{"label":"smart contracts","permalink":"/blog/tags/smart-contracts"},{"label":"price feed","permalink":"/blog/tags/price-feed"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"},{"label":"decentralized","permalink":"/blog/tags/decentralized"}],"readingTime":13.95,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"}],"frontMatter":{"title":"Chainlink Price Feeds: Building a Custom Flux Monitor DON","description":"How to build and integrate a custom Chainlink oracle price feed using FluxAggregator for aggregating real-world data on-chain for your Web3 application.","date":"2024-03-16","image":"https://docs.linkwellnodes.io/img/flux-agg-article/Flux_Aggregator_Architecture_Diagram.png","keywords":["chainlink oracle","smart contracts","price feed","web3","blockchain","decentralized"],"authors":["Ken"],"tags":["chainlink oracle","smart contracts","price feed","web3","blockchain","decentralized"]},"prevItem":{"title":"Finding a Chainlink Oracle: A Guide for Web3 Developers","permalink":"/blog/How-To-Find-A-Chainlink-Oracle"},"nextItem":{"title":"Chainlink Direct Request Architectures Explained","permalink":"/blog/Chainlink-Basic-Request-Model-Architectures"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>A how-to guide for building a decentralized Chainlink oracle price feed that can be integrated into your Web3 application.</h2>\\n\\n![Chainlink Blog- How Price Feeds Secure DeFi](./Header.webp \\"Chainlink Blog- How Price Feeds Secure DeFi\\")\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**On this page**:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={2}\\n/>\\n\\n---\\n\\n## Introduction\\n\\nMany Web3 developers are unaware of the ability to integrate custom Chainlink price feeds into their Web3 application. \\n\\nChainlink provides a diverse selection of [official data feeds](https://data.chain.link/feeds), encompassing various data types like asset prices, reserve balances, NFT floor prices, and more. While these feeds cover a broad spectrum, Web3 developers sometimes require data that goes beyond Chainlink\'s existing data feed offerings. To cater to these specialized needs, Chainlink allows for the creation of custom price feeds.\\n\\nIn this article we will:\\n\\n1. Explain how decentralized Chainlink price feeds work.\\n\\n1. Define high-level steps for creating a price feed for your Web3 application.\\n\\n1. Offer a comparison between Chainlink **price feeds** and Chainlink **direct requests** (Any API).\\n\\n1. Show you how to find a Chainlink oracle to support your price feed.\\n\\n1. Explore use cases for Chainlink price feeds.\\n\\n:::tip\\n### Looking for a Chainlink oracle? \\n\\nLinkWell Nodes offers Chainlink oracle services on all major EVM-based mainnet and testnet blockchains. To view a directory of our oracle addresses and job IDs, please feel free to view our [Chainlink data feeds documentation](/services/direct-request-jobs/Jobs-and-Pricing).\\n:::\\n\\n*Related video*: Chainlink Price Feeds\\n<center><iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/e75kwGzvtnI\\" title=\\"Chainlink Price Feeds\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe></center>\\n\\n## Chainlink\'s Decentralized Data Model\\n\\nIn our previous article, we explored how Web3 developers can collaborate with Chainlink node operators to [create a custom data feed via Chainlink\'s basic request model](/blog/Requesting-A-Custom-Chainlink-Data-Feed-Using-Any-API) - also known as \\"direct requests\\" or \\"Any API\\". One of the primary benefits of this approach is that data is only written when requested by the consumer, saving on fees. This model uses a pull-based system to retrieve data on-chain from any internet source (Any API) at any desired frequency and is typically served by just a single Chainlink oracle.\\n\\nThis article will shift gears and instead delve into Chainlink\'s decentralized data model. We will explore how this model facilitates the establishment of custom decentralized oracle networks (DON) that compile data on-chain from multiple data sources through a decentralized network of independent node operators.\\n\\nUltimately, Chainlink price feeds allow data to be updated automatically within your smart contract based on a certain set of conditions, ensuring that your data is always fresh whenever your Web3 application needs it.\\n\\nChainlink\'s Decentralized Data Model aggregates data from multiple sources to ensure accuracy and reliability for smart contracts.\\n\\nOffchain Reporting (OCR) and Flux Aggregator (FluxAgg) are two such protocols, with OCR optimizing for efficiency by processing data and reaching consensus off-chain, reducing costs and improving update speed. Flux Aggregator, its predecessor, performs a similar aggregation, but directly on the blockchain. **This article will focus on the Flux Aggregator protocol.**\\n\\nThe decentralized data model introduces a number of features:\\n\\n1. **Security:** The DON aggregates data from multiple Chainlink oracles, reducing the risk of manipulation by any single oracle, and helping to eliminate single points of failure.\\n\\n1. **Reliability:** The DON maintains high availability and reliability of data feeds, even if some data providers are compromised or incorrect.\\n\\n1. **Accuracy:** Sophisticated algorithms filter out data anomalies, ensuring the data reflects true market conditions or measurable parameters accurately.\\n\\n1. **Trust-Minimization:** All operations and data sources are transparent and verifiable, building trust among both users and developers.\\n\\n1. **Customization:** Offers flexibility in specifying data sources, update frequencies, and aggregation methods to meet specific project requirements.\\n\\n### Components of the Decentralized Data Model\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/flux-agg-article/Flux_Aggregator_Architecture_Diagram.webp\\" alt=\\"Chainlink Flux Aggregator Architecture Diagram\\" title=\\"Chainlink Flux Aggregator Architecture Diagram\\" />\\n</p>\\n\\n> In the architecture depicted above, three independent Chainlink oracle teams are showcased solely for illustrative purposes. In practice, any number and combination of independent Chainlink oracles can be employed. The flexibility in this arrangement is mainly motivated by considerations such as trust-minimization, reliability, and security budgets.\\n> Additionally, each Chainlink oracle can (and should) utilize a different external data source or API endpoint if at all possible. This provides decentralization at the external data source layer. For more on this topic, we recommend referring to Chainlink\'s article on [the 3 levels of aggregation for price feeds](https://blog.chain.link/levels-of-data-aggregation-in-chainlink-price-feeds/).\\n\\nThe components of the decentralized data model include:\\n\\n**Consumer Contract:** A Consumer contract refers to any contract that utilizes Chainlink price feeds to access the data aggregated on-chain. To access this data, consumer contracts need to instantiate the appropriate [AggregatorV3Interface contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol) and execute one of its available functions.\\n\\n```\\n    ...\\n    AggregatorV3Interface feed = AggregatorV3Interface(address);\\n    return feed.latestRoundData();\\n```\\n\\n> Off-chain (Web 2.0) applications are also capable of utilizing price feeds. For further information, refer to the example code in JavaScript and Python on the [Using Data Feeds](https://docs.chain.link/data-feeds/price-feeds) page.\\n\\n**Proxy Contract:** Proxy contracts serve as on-chain intermediaries that point to a specific aggregator associated with a data feed. This approach allows for the aggregator to be updated seamlessly, ensuring that contracts consuming the service experience no disruptions.\\n\\nWhile the design of proxy contracts may differ across various data feeds, a frequently used example is the [AggregatorProxy.sol contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.7/dev/AggregatorProxy.sol) available on Github.\\n\\n```\\n    ...\\n    contract AggregatorProxy is AggregatorProxyInterface, ConfirmedOwner {\\n```\\n\\n**FluxAggregator Contract:** This refers to the contract that periodically obtains data updates from the oracle network. It stores this aggregated data onchain, enabling consumers to retrieve the data and act upon it within the same transaction. This data can be accessed through the Data Feed address and by interfacing with the [AggregatorV3Interface contract](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol).\\n\\n```\\n      function latestRoundData()\\n        external\\n        view\\n        returns (\\n          uint80 roundId,\\n          int256 answer,\\n          uint256 startedAt,\\n          uint256 updatedAt,\\n          uint80 answeredInRound\\n        );\\n```\\n\\nTypically, the client (the Web3 project or team in need of the price feed) is responsible for maintaining and deploying the FluxAggregator contract. However, Chainlink oracles (node operators) can assist with the deployment process. It is also up to the client to keep the contract funded with LINK tokens to guarantee payment for the Chainlink oracles\' services.\\n\\nFor additional information on the AggregatorV3Interface API, please reference [Chainlink\'s documentation](https://docs.chain.link/data-feeds/api-reference#aggregatorv3interface).\\n\\n**Chainlink Oracle:** The Chainlink node (or oracle) is an off-chain, Go-based runtime provided by Chainlink Labs. Oracles are typically operated by professional Chainlink node operator teams who specialize in deploying and maintaining Chainlink oracle infrastructure. They work in tandem with external adapters to collect data from various external sources, aggregate it to ensure accuracy and reliability, and then feed the requested data back to the on-chain aggregator contract.\\n\\nChainlink oracles run the Flux Monitor job specification, as demonstrated in the following example:\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/flux-agg-article/Flux_Monitor_Job_Spec.webp\\" alt=\\"Chainlink oracle Flux Monitor job spec\\" title=\\"Chainlink oracle Flux Monitor job spec\\" />\\n</p>\\n\\n\\nThis job specification outlines the criteria for data feed updates, including the sources of observation utilized and the frequency of updates on the blockchain. For more information on the Flux Monitor job spec, feel free to [review the fields here](https://docs.chain.link/chainlink-nodes/oracle-jobs/all-jobs#flux-monitor-jobs). These fields can be tuned as necessary as per the Web3 project\'s requirements\\n> Oracles that participate in the data aggregation process are compensated for their work, typically in the form of the Chainlink (LINK) token. This incentivizes oracles to provide accurate and timely data, ensuring the reliability of the data feed.\\n\\n**External Adapters:** External adapters facilitate custom logic for requests as HTTP services that can be written in any programming language, handling tasks from authenticated data access to IoT processing and bank payments. They bridge various data sources, including enterprise systems and other blockchains, ensuring broad connectivity beyond simple HTTP requests.\\n\\nChainlink\'s list of external adapters can be found [here](https://github.com/smartcontractkit/external-adapters-js/tree/main/packages/sources).\\n\\n**Data Sources:** Data sources refer to the external providers from which Chainlink oracles retrieve information. These can include financial market data, weather reports, sports outcomes, or any other real-world data that smart contracts may require.\\n\\n### Flux Aggregator Round System\\n\\nThe Aggregator round system is a mechanism used by Chainlink to update data feeds in a decentralized and secure manner. Here\'s an overview of how it functions:\\n\\n1. **Round initiation:** A round represents a cycle in which data is aggregated and updated. Rounds can be initiated based on two main conditions: the Deviation Threshold and the Heartbeat Threshold.\\n\\n\\t* *Deviation Threshold:* This condition checks if the difference between the latest on-chain data and the new off-chain data collected by the oracles exceeds a pre-defined threshold. If the data deviates more than this threshold, it triggers a new round to update the on-chain data to reflect the more accurate, recent off-chain data.\\n\\t\\n\\t* *Heartbeat Threshold:* This condition triggers a new round after a specified time has passed since the last update, regardless of data deviation. This ensures that the data feed is updated regularly, maintaining its relevance and accuracy over time.\\n\\n2. **Data collection:** Once a new round is initiated, participating oracles collect data from their off-chain sources. These sources can vary based on the data feed, ranging from financial market prices to real-world asset data.\\n\\n3. **Data aggregation:** After collecting the data, each oracle reports its findings back to the FluxAggregator contract. The contract then aggregates this data using a predefined method, such as taking the median or average, to determine the most accurate representation of the data collected from all participating oracles.\\n\\n4. **Data update:** The aggregated result is then updated on-chain, becoming the latest data point for the feed. This data then becomes available for smart contracts and other on-chain entities to use, ensuring they have access to accurate and timely information.\\n\\n## Steps for developing a custom Price Feed with FluxAggregator\\n\\nWhile we won\'t dive into the exact deployment process for the FluxAggregator protocol in this article (stay tuned for a future guide on this), we will provide the high-level steps.\\n\\nThe steps for integrating a custom Chainlink price feed are:\\n\\n1. **Locate a Chainlink node operator**: Join the **#operator-requests** channel of the [Chainlink Official Discord server](https://discord.com/invite/chainlink), or reach out to us (LinkWell Nodes) [here](https://linkwellnodes.io/).\\n\\n1. **Explain your requirements**: Tell your chosen Chainlink oracle about your Web3 project\'s requirements for a price feed. These requirements can typically include the price feed pair, the number of node operators desired in the DON, and the data sources to be utilized. Once the requirements are clear, the node operator can assist you (if needed) in initially setting up the FluxAggregator contract on your selected testnet, configuring it, and supplying the price feed address to utilize the price feed in the consumer contract.\\n\\n1. **Expand your oracle network**: Following comprehensive testing, you\'ll want to enlist additional Chainlink oracles in your price feed DON. Often, your chosen Chainlink oracle will have their own network of contacts they can reach out to for additional support.\\n\\n1. **Deploy your price feed**: Deploy the FluxAggregator contract on mainnet alongside your Web3 application.\\n\\nThe bulk of the integration effort takes place on the Chainlink oracle\'s end, but from a consumer perspective, it\'s as simple as that!\\n\\n## Price Feeds vs. Direct Requests (Any API)\\n\\nWhile this article focuses primarily on price feeds, it may be helpful to offer a comparison with a different type of Chainlink request: [direct requests](/knowledgebase/Direct-Request-Guide) (also known as \'Any API\').\\n\\n**Price Feeds (i.e., Flux Aggregator)**:\\n\\n**Pros**:\\n\\n* Data is always up-to-date, as it is re-written on-chain whenever a certain % change in value occurs (i.e., whenever a 5% price deviation occurs).\\n\\n* Can utilize multiple Chainlink oracles to serve your price feed, for enhanced decentralization and trust-minimization.\\n\\n**Cons**:\\n\\n* More expensive, as you pay for every on-chain update of your data.\\n\\n* Longer and more complicated set-up, which potentially involves finding and communicating your requirements to multiple oracle teams.\\n\\n**Direct Requests (Any API):**\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/flux-agg-article/Chainlink_Direct_Request_Architecture.webp\\" alt=\\"Basic Request Model (Any API) Architecture\\" title=\\"Basic Request Model (Any API) Architecture\\" />\\n</p>\\n\\n**Pros**:\\n\\n* Cheaper, since you only pay for what you use (data is updated only when you request it, or on a set schedule).\\n\\n* Quick and easy setup (you can be up and running within minutes using our [self-service documentation](/services/direct-request-jobs/Jobs-and-Pricing)).\\n\\n* Can return any data type on-chain, whereas price feeds are limited to the *int* data type.\\n\\n**Cons**:\\n\\n* Takes at least 1 block for the data to appear on-chain, depending on the blockchain.\\n\\n* Typically not as decentralized or trust-minimized as a price feed, although developers have the option to [utilize multiple Chainlink oracles in a DON](https://medium.com/linkwell-nodes/chainlinks-basic-direct-request-model-chainlink-oracle-architectures-explained-996e6e9d2bb4), if desired.\\n\\n## Where can I find a Chainlink oracle?\\n\\nAs of the time of writing, there lacks a centralized marketplace for Chainlink oracles.\\n\\n:::tip\\nCheck out our article on [How to Find a Chainlink Oracle](/blog/How-To-Find-A-Chainlink-Oracle) for detailed information on how to find a Chainlink oracle.\\n:::\\n\\nSpending time to find the right Chainlink oracle will save you time (and money) down the road. Working with a knowledgeable and competent Chainlink node operator can greatly streamline the process of requesting and building a custom data feed, allowing you or your team to allocate resources more efficiently to your Web3 application.\\n\\n## Price Feed example use cases\\n\\n### Money Markets\\n\\nBlockchain money markets are a key part of the decentralized finance (DeFi) ecosystem, using smart contracts to connect lenders looking to earn on their digital assets with borrowers seeking capital. These platforms increase the utility and liquidity of cryptocurrencies by enabling active lending and borrowing, thereby enhancing the liquidity and utility of digital assets across the board.\\n\\nThe operational efficiency and financial stability of these platforms hinge on the accurate and real-time valuation of assets, necessitating the integration of reliable price feeds. This is where sophisticated solutions like Chainlink price feeds come into play. They provide up-to-the-minute market data for a wide array of cryptocurrencies, thereby enabling protocols such as Aave and Compound to precisely assess the value of collateral and debt within their systems. This critical functionality allows these protocols to execute timely liquidations for undercollateralized positions, ensuring the financial integrity and solvency of the platform.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/flux-agg-article/Chainlink_Aave_Price_Feed.webp\\" alt=\\"Chainlink Aave Price Feed Example Use Case\\" title=\\"Chainlink Aave Price Feed Example Use Case\\" />\\n</p>\\n\\nIn essence, blockchain-based money markets not only facilitate a dynamic environment for the DeFi community to lend and borrow assets efficiently but also underscore the importance of accurate price feeds in maintaining the economic stability and trustworthiness of these platforms. Through the strategic use of Chainlink price feeds, these protocols are able to uphold their commitment to safeguarding user assets while promoting healthy liquidity and fair market practices.\\n\\n### Asset Tokenization\\n\\nTokenizing real-world assets, from currencies to stocks, bonds, real estate, and gold, opens up possibilities for increased investor access, improved transparency, and enhanced market liquidity.\\n\\nFor the successful tokenization of assets, the availability of accurate, onchain market price data via Chainlink price feeds is crucial. Take, for instance, the PAXG Chainlink price feed for tokenized gold, which allows for the creation of secure markets around physical gold. Moreover, Paxos leverages Chainlink Proof of Reserve to assure onchain that its tokenized gold offerings are fully backed by offchain gold reserves, fostering high-integrity markets for these assets.\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/flux-agg-article/Decentralized_Oracle_Network_Price_Feed.webp\\" alt=\\"Chainlink Price Feeds Oracle Network\\" title=\\"Chainlink Price Feeds Oracle Network\\" />\\n</p>\\n\\n> For additional use cases of Chainlink price feeds, we highly recommend checking out Chainlink\'s article on the [77+ smart contract use cases enabled by Chainlink](https://blog.chain.link/smart-contract-use-cases/).\\n\\n## Conclusion\\n\\nChainlink price feeds provide a way of ensuring your on-chain data is always fresh, by automatically updating your smart contract whenever a certain threshold criteria is met. They also provide a mechanism for further decentralizing your data feed, by allowing your data to be aggregated from multiple Chainlink oracles at a time.\\n\\nIn comparison to the [Direct Request](/knowledgebase/Direct-Request-Guide) (Any API) model, Chainlink price feeds are more expensive, as they are typically updated more frequently on-chain, and involve greater work and coordination to set up, although this may be worth it for some security-intensive and enterprise-grade applications.\\n\\nThe rigorous emphasis on blockchain data integrity and security has elevated Chainlink price feeds to the forefront as the most widely-adopted oracle solution within the DeFi sector. Moreover, Chainlink price feeds are tailored to expand in tandem with DeFi\'s evolution, supporting its ascent to become the underlying technology for major global financial markets, encompassing billions to trillions of dollars in value.\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/Chainlink-Basic-Request-Model-Architectures","metadata":{"permalink":"/blog/Chainlink-Basic-Request-Model-Architectures","source":"@site/blog/Chainlink-Basic-Request-Model-Architectures/index.md","title":"Chainlink Direct Request Architectures Explained","description":"Exploring Chainlink\'s Basic Request Model Architectures: Designing Chainlink oracle networks for reliable real-world data feeds.","date":"2024-02-17T00:00:00.000Z","formattedDate":"February 17, 2024","tags":[{"label":"chainlink","permalink":"/blog/tags/chainlink"},{"label":"smart contracts","permalink":"/blog/tags/smart-contracts"},{"label":"decentralized oracles","permalink":"/blog/tags/decentralized-oracles"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"},{"label":"node operator","permalink":"/blog/tags/node-operator"}],"readingTime":12.02,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"}],"frontMatter":{"title":"Chainlink Direct Request Architectures Explained","description":"Exploring Chainlink\'s Basic Request Model Architectures: Designing Chainlink oracle networks for reliable real-world data feeds.","date":"2024-02-17","keywords":["chainlink","smart contracts","decentralized oracles","web3","blockchain","node operator"],"authors":["Ken"],"tags":["chainlink","smart contracts","decentralized oracles","web3","blockchain","node operator"]},"prevItem":{"title":"Chainlink Price Feeds: Building a Custom Flux Monitor DON","permalink":"/blog/Build-A-Chainlink-Price-Feed-With-Flux-Aggregator"},"nextItem":{"title":"Requesting a Custom Any API Chainlink Data Feed: A 7 Step Guide For Web3 Developers","permalink":"/blog/Requesting-A-Custom-Chainlink-Data-Feed-Using-Any-API"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>An in-depth guide into Chainlink\'s Basic Request (Direct Request) model, and its various deployment architectures</h2>\\n\\n![Chainlink Basic Request Model Architecture Header](./Header.webp \\"Chainlink Basic Request Model Architectures\\")\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**On this page**:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={3}\\n/>\\n\\n---\\n\\n## Introduction\\n\\nChainlink\'s basic request model - previously known as the \\"direct request model\\" - is a bit of a misnomer.\\n\\nWhile this model can indeed be viewed as the \\"basic\\" building block of Chainlink oracle requests - especially in comparison to some of its more recent counterparts such as Functions, Off-Chain Reporting (OCR), and the Cross-Chain Interoperability Protocol (CCIP) - the Basic Request Model supports a number of different deployment architectures that allow it to connect your smart contract to virtually anywhere on the internet.\\n\\nIn this article, we\'ll unravel the intricacies of Chainlink\'s basic request model, shedding light on the various architectures / design patterns that Web3 developers can implement to incorporate reliable, real-world data into their decentralized applications.\\n\\n:::tip\\n### Looking for a Chainlink oracle, oracle address, or job id?\\nView our [Chainlink data feeds documentation](/services/direct-request-jobs/Jobs-and-Pricing), which has everything you need to get started requesting data from our reliable, distributed oracle infrastructure.\\n:::\\n\\n## What is Chainlink\'s Basic Request (Direct Request) Model?\\n\\nThis article will provide an in-depth analysis of the components that make up the basic request model. Subsequently, we will delve into the architectures that developers have at their disposal for their Web3 applications.\\n\\n> For a high-level overview of the basic request model (direct request model), you can also visit our [website\'s documentation](/knowledgebase/Direct-Request-Guide), our previous article on [building custom Chainlink data feeds using Any API](/blog/Requesting-A-Custom-Chainlink-Data-Feed-Using-Any-API), or our exploration of [Chainlink Functions Versus Direct Request Jobs](/blog/Chainlink-Any-API-Direct-Requests-Vs-Functions).\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/CL_DR_Model_Single_Chainlink_Oracle.webp\\" alt=\\"Basic Request (Direct Request) Model Workflow Single Chainlink Oracle\\" title=\\"Basic Request (Direct Request) Model Workflow Single Chainlink Oracle\\" />\\n</p>\\n\\nThe components of the basic request model implementation include the following:\\n\\n* **Consumer Contract / [ChainlinkClient.sol](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/ChainlinkClient.sol):** The consumer contract (or \\"client\\") is a contract that enables smart contracts to consume data from Chainlink oracles. It\'s available in the Chainlink smart contract library, which can be [installed using one of several package managers](https://docs.chain.link/resources/create-a-chainlinked-project). The client initiates a request to a known Chainlink oracle by utilizing the **transferAndCall()** function. Your request data is encoded and passed to this function call. The initiation of this call, specifically within the **ChainlinkClient** contract, is executed through the **sendChainlinkRequest() **or** sendChainlinkRequestTo()** function.\\n\\n* **Chainlink (LINK) Token:** LINK is a token that adheres to the ERC-677 standard, incorporating the **transferAndCall()** function. This function enables the simultaneous transfer of tokens and the initiation of specific logic within the receiving contract, all within a single transaction. The sent LINK token is used to pay the corresponding node operator for fulfilling your request. More information on the LINK token and LINK token contracts can be found [here](https://docs.chain.link/resources/link-token-contracts).\\n\\n* **Oracle/Operator Contract:** The oracle (or operator) contract is a contract deployed by any team operating a Chainlink node (oracle), and operates in tandem with the corresponding Chainlink node(s). Oracle contracts manage on-chain **requests** initiated through the LINK token by using the **onTokenTransfer()** function as a **LinkTokenReceiver**. When this function is executed, the oracle contract emits an **OracleRequest** event, conveying essential information about the request to the Chainlink oracle. This event serves as a for the off-chain oracle node to take the necessary actions in fulfilling the client\'s request. To **fulfill** requests, the oracle contract contains the **fulfillOracleRequest()** function, which is called by the oracle node once the requested result (data) is ready to be written to the blockchain. This function sends the result back to the **ChainlinkClient** contract, by executing the callback (fulfillment) function provided by the client within the initial request.\\n\\n* **Chainlink Node (oracle):** The Chainlink node (or oracle) is an off-chain, Go-based runtime provided by Chainlink Labs that actively monitors events emitted by its associated on-chain **oracle contract**. Upon detecting an **OracleRequest** event, the node utilizes the emitted data to execute a specific request workflow (or \\"job\\"). One of the most common job types for a node involves making a GET request to an API, parsing the response, converting the result into blockchain-compatible format, and finally submitting it back to the oracle contract through an on-chain transaction, utilizing the **fulfillOracleRequest()** function.\\n\\n* **External Adapters:** External adapters exist to execute any custom logic required for the request. External adapters are essentially HTTP services (programmed in any language), and thus they can execute whatever custom logic necessary for the request. Common workflows handled by external adapters include passing authenticated requests to premium data providers, processing IoT sensor information, handling bank payments, communicating with enterprise back-ends, other blockchain networks, and connecting to various other data sources that might not be accessible via a simple HTTP request.\\n\\n* **API (i.e., the internet):** An API endpoint is the specific URL or data service (i.e., CoinMarketCap) to which the offchain oracle (or external adapter) makes its request for data. In the context of Chainlink, an API is the source of the data that you\'d like written to your smart contract.\\n\\n## Basic Request Model Oracle Architectures\\n\\nThe following architectures depict the sequential progression of a Web3 developer manually triggering the request function within their consumer contract. It commences with the most straightforward oracle architecture - a direct request to a single Chainlink oracle owned and operated by a single Chainlink node operator, and advances to the most advanced architecture - a direct request to multiple Chainlink oracles owned and operated by multiple independent Chainlink node operators.\\n> To simplify the forthcoming architectural diagrams, we have opted to exclude the potential integration of other Chainlink services, including VRF, Automation, CCIP, official Chainlink data feeds, and others. Nevertheless, we advise incorporating Chainlink Automation, at the very least, to streamline the request pipeline based on specific external triggers.\\n> **Moreover, depending on the requirements of your Web3 project, we strongly suggest integrating any and all Chainlink services necessary for the project\'s success!**\\n\\n### **Architecture 1**: Direct Request to a Single Chainlink Oracle\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/CL_DR_Model_Single_Chainlink_Oracle.webp\\" alt=\\"Basic Request (Direct Request) Model Single Chainlink Oracle\\" title=\\"Basic Request (Direct Request) Model Single Chainlink Oracle\\" />\\n</p>\\n\\n**Architecture 1** is the simplest version of the basic request model. The sequence begins with a Web3 developer triggering a request (through the on-chain consumer contract) to a single Chainlink oracle owned by a single Chainlink node operator. The Chainlink oracle fetches the requested data and submits the obtained result back on-chain.\\n> **Important note**: Reputable node operators will run multiple Chainlink nodes in a redundant cluster, having one \\"primary\\" oracle responding to requests, and at least one \\"backup\\" oracle operating in passive mode, ready to take over in case of a failure in the primary oracle.\\n> At LinkWell Nodes, we operate all of our [mainnet oracles](/services/direct-request-jobs/mainnets) in redundant, fault-tolerant, location-independent clusters, ensuring that your workload will complete on time, every time.\\n\\n**Pros:**\\n\\n* Simplified configuration and deployment (can be up & running within the day).\\n\\n* Most cost-effective choice.\\n\\n**Cons:**\\n\\n* Centralization at the oracle team layer (requires you to find an oracle team that you trust).\\n\\n**When to Implement?**\\n\\n* Your Web3 project operates on a constrained budget, limiting support for requests to multiple Chainlink oracles.\\n\\n* You would benefit from an oracle team designing and implementing the request for you.\\n\\n* Chainlink Functions doesn\'t support your use case or network.\\n\\n### **Architecture 2**: Direct Request to Multiple Chainlink Oracles\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/CL_DR_Model_Multi_LW_Chainlink_Oracle.webp\\" alt=\\"Basic Request (Direct Request) Model Workflow Multiple LinkWell Chainlink Oracles\\" title=\\"Basic Request (Direct Request) Model Workflow Multiple LinkWell Chainlink Oracles\\" />\\n</p>\\n\\n**Architecture 2** closely resembles **Architecture 1**, with the primary difference lying in the inclusion of multiple Chainlink oracles (linked to separate oracle/operator contracts) handling the request. These oracles are owned and overseen by the same Chainlink node operator.\\n> With this architecture, each Chainlink oracle can (and should) utilize a different external data source or API endpoint if possible. This provides decentralization and enhanced reliability at the external data source layer. For more on this topic, we recommend referring to Chainlink\'s article on [the 3 levels of aggregation for price feeds](https://blog.chain.link/levels-of-data-aggregation-in-chainlink-price-feeds/).\\n\\n**Pros:**\\n\\n* Enhanced decentralization at the Chainlink oracle layer.\\n\\n* Increased reliability of the request pipeline.\\n\\n* Decentralization at the external data source layer.\\n\\n**Cons:**\\n\\n* Increased intricacy in configuration and deployment.\\n\\n* Centralization at the oracle team layer (requires trust in the oracle team that you have chosen).\\n\\n* The per-request cost scales by N(x), where \\"N\\" is the number of independent Chainlink oracles fulfilling the request.\\n\\n**When to Implement?**\\n\\n* For mainnet use cases, this architecture presents itself as a strong candidate, particularly when explicit trust is vested in the selected Chainlink node operator.\\n\\n* You would benefit from oracle teams designing and implementing the request for you.\\n\\n* Chainlink Functions doesn\'t support your use case or network.\\n\\n### **Architecture 3**: Direct Request to a Multiple Chainlink Oracles Across Independent Chainlink Node Operators\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/CL_DR_Model_Four_Chainlink_Oracle.webp\\" alt=\\"Basic Request (Direct Request) Model Workflow Multiple Independent Chainlink Oracles\\" title=\\"Basic Request (Direct Request) Model Workflow Multiple Independent Chainlink Oracles\\" />\\n</p>\\n\\n**Architecture 3** is distinct from **Architecture 2** in that it incorporates multiple independent Chainlink oracle teams. Diverging from previous designs, this architecture embraces the essence of decentralization, emulating a decentralized oracle network (DON) as seen with Chainlink\'s official protocols.\\n\\n> In the architecture depicted above, four independent Chainlink oracle teams are showcased solely for illustrative purposes. In practice, any number and combination of independent Chainlink oracles can be employed. The flexibility in this arrangement is mainly motivated by considerations such as trust-minimization, decentralization, and cost factors.\\n\\n**Pros:**\\n\\n* Maximal trust-minimization across all layers.\\n\\n* Decentralization across all layers.\\n\\n* Maximal reliability of the request pipeline.\\n\\n**Cons:**\\n\\n* Requires you to find and reach out to multiple oracle teams, and convince them to implement a decentralized oracle network for your request. The fees and time commitment of such designs can be high.\\n\\n* Increased intricacy in configuration and deployment.\\n\\n* The per-request cost scales by N(x), where \\"N\\" is the number of independent Chainlink oracles fulfilling the request.\\n\\n**When to Implement?**\\n\\n* When maximum decentralization, reliability, and trust-minimization are a priority for your Web3 application.\\n\\n* Chainlink Functions doesn\'t support your use case or network.\\n\\n### **Bonus Architecture**: Direct Request Without a LINK Fee\\n\\n<p align=\\"center\\">\\n  <img src=\\"/img/Chainlink_DR_Model_Single_Chainlink_Oracle_No_LINK_Fee.webp\\" alt=\\"Basic Request (Direct Request) Model Single Chainlink Oracle No LINK Fee\\" title=\\"Basic Request (Direct Request) Model Single Chainlink Oracle No LINK Fee\\" />\\n</p>\\n\\nAs a notable feature of the basic request model, we are introducing a bonus architecture where Chainlink node operators have the option to eliminate the LINK fee for each request and opt for alternative forms of payment, such as fiat or other L1/L2 tokens. **This methodology can be implemented within any of the above architectures in this article.**\\n\\nAdditionally, this opens the door to innovative payment models as demonstrated by the following:\\n\\n* Bulk up-front payments for a set number of requests to the Chainlink oracle.\\n\\n* Discounts for high volume use cases.\\n\\n* Monthly flat fees for unlimited/exclusive use of the Chainlink oracle, where on-chain oracle data submission costs are reimbursed to the node operator by the consumer.\\n\\n### Key Takeaways\\n\\nWe\'d like to leave four final takeaways for your consideration when deciding which architecture to implement using Chainlink\'s basic request model:\\n\\n* **Trust-Minimization and Decentralization:** When choosing your architecture, it\'s necessary to put some thought into what aspects of your design require decentralization - datacenter decentralization, oracle team decentralization, and data source decentralization, are all key components that one must consider.\\n\\n* **On-Chain Reporting Speeds:** A fundamental advantage of the basic request model for Web3 use cases - particularly those reliant on swift on-chain reporting speeds - lies in the ability of direct request jobs to provide oracle request results on-chain within 1\u20133 blocks of the initial request.\\n\\n* **Data Aggregation with the Basic Request Model:** In all architectures, Web3 developers possess the flexibility to aggregate the data received by their request, whether through the usage of an external adapter, or an aggregator contract.\\n\\n* **Functions:** While Chainlink\'s basic request model has successfully served hundreds if not thousands of Web3 projects since Chainlink\'s launch, [Chainlink Functions](https://docs.chain.link/chainlink-functions) represents a viable alternative. While Functions is still in mainnet BETA and may not be recommended for production workloads, Web3 developers may want to review Functions before opting for the basic request model.\\n\\n## Conclusion\\n\\nChainlink\'s basic request model (also called \\"direct requests\\") represents a capable and flexible method of retrieving off-chain (i.e., internet) data and writing it to your contract.\\n\\nWithin the basic request model, several different architectures and design patterns exist, all of which juggle trade-offs in terms of centralization, cost, and complexity. While other Chainlink services may offer a different presentation of the above trade-offs, the basic request model continues to be one of the fundamental building blocks that make Chainlink so versatile at solving the blockchain oracle problem.\\n\\nWe trust that this article sheds helps to shed some light on the various Chainlink oracle architectures available within the basic request model, and offers valuable insights to Web3 developers looking to integrate real-world data into their blockchain smart contracts.\\n\\n> **Why Chainlink?**\\n>\\n> Smart contracts are limited from directly interacting with the internet, creating what\'s known as the blockchain [oracle problem](https://chain.link/education-hub/oracle-problem). This hurdle represents one of the greatest limitations in building Web3 smart contracts.\\n> Hybrid smart contracts solve this by using oracles as middleware - enabling external data publishing & retrieval, and scalable off-chain computations. Oracles act as a two-way bridge, enhancing connectivity while providing security against single points of failure.\\n> Chainlink - the industry standard Web3 oracle platform - is the most widely used decentralized oracle network, securing over $75B in value across a diverse assortment of blockchains. It operates as an ecosystem of independent decentralized oracle networks (DONs), guaranteeing robust and versatile oracle services.\\n\\n---\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/Requesting-A-Custom-Chainlink-Data-Feed-Using-Any-API","metadata":{"permalink":"/blog/Requesting-A-Custom-Chainlink-Data-Feed-Using-Any-API","source":"@site/blog/Requesting-A-Custom-Chainlink-Data-Feed-Using-Any-API/index.md","title":"Requesting a Custom Any API Chainlink Data Feed: A 7 Step Guide For Web3 Developers","description":"In this article, we explore the 7 steps that Web3 developers can follow for integrating real-world data from Chainlink oracles into their smart contracts.","date":"2024-02-01T00:00:00.000Z","formattedDate":"February 1, 2024","tags":[{"label":"chainlink","permalink":"/blog/tags/chainlink"},{"label":"oracle","permalink":"/blog/tags/oracle"},{"label":"smart contract","permalink":"/blog/tags/smart-contract"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"}],"readingTime":14.03,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"}],"frontMatter":{"title":"Requesting a Custom Any API Chainlink Data Feed: A 7 Step Guide For Web3 Developers","description":"In this article, we explore the 7 steps that Web3 developers can follow for integrating real-world data from Chainlink oracles into their smart contracts.","date":"2024-02-01","keywords":["chainlink","oracle","data feed","smart contract","web3","blockchain"],"authors":["Ken"],"tags":["chainlink","oracle","smart contract","web3","blockchain"]},"prevItem":{"title":"Chainlink Direct Request Architectures Explained","permalink":"/blog/Chainlink-Basic-Request-Model-Architectures"},"nextItem":{"title":"Chainlink Any API: Direct Request vs. Functions","permalink":"/blog/Chainlink-Any-API-Direct-Requests-Vs-Functions"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>7 steps for integrating real-world data from Chainlink oracles into your Web3 smart contract.</h2>\\n\\n![Chainlink Any API Data Feed](./Header.webp \\"Chainlink Any API Data Feed\\")<center><small>Credit: https://blog.chain.link/apis-smart-contracts-and-how-to-connect-them</small></center>\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**On this page**:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={2}\\n/>\\n\\n---\\n\\n## Introduction\\n\\nSmart contracts that integrate Chainlink data feeds are far more capable than those that don\'t.\\n\\nSince its launch in 2017, Chainlink - the industry standard Web3 services platform - has curated an extensive array of [official data feeds](https://docs.chain.link/data-feeds), among a myriad of other powerful services, providing developers with a seamless integration of real-world information into their applications. However, the dynamic nature of Web3 applications often demands access to data beyond what official Chainlink feeds offer. This is where custom Chainlink [Any API](https://docs.chain.link/any-api/introduction) data feeds step in, catering to the unique requirements of diverse smart contract applications. The process for requesting a custom Any API Chainlink data feed, however, hasn\'t always been clearly defined.\\n\\nThat\'s why we\'ve gone through great lengths to make the process as seamless as possible for Web3 developers looking to integrate Chainlink\'s Any API capabilities.\\n\\n:::tip\\n### Looking for a Chainlink oracle, oracle address, or job id?\\nView our [Chainlink data feeds documentation](/services/direct-request-jobs/Jobs-and-Pricing), which has everything you need to get started requesting data from our reliable, distributed oracle infrastructure.\\n:::\\n\\n## Prerequisites to making a Chainlink request\\n\\nThere are three Web3 technologies that you\'ll need to have in place before making your first Chainlink request:\\n\\n1. **A Web3 Wallet:** Web3 wallets are required for not only storing your tokens, but also for deploying your smart contracts and signing messages. Examples include Ledger, Trezor, MetaMask, Coinbase Wallet, or Trust Wallet.\\n\\n1. **An IDE:** EVM-compatible Integrated development environments (IDE) like [Remix](https://remix.ethereum.org/) are required for deploying and testing your smart contract. Advanced users may prefer Hardhat or Foundry, particularly for more complex deployments.\\n\\n1. **Solidity:** Solidity is Ethereum\'s primary programming language for developing smart contracts. It will be helpful to have at least a basic understanding of Solidity before getting started.\\n\\nAn additional crucial element that you\'ll need is a well-defined use case. What project are you working on? What specific on-chain data and APIs are integral to your objectives? And perhaps most importantly, what is your plan for utilizing the data once it\'s retrieved? The possibilities are endless, and the only true constraint here is the extent of your imagination.\\n\\nIf you don\'t already have a well-defined use case, here are a few custom data feed ideas:\\n\\n* **Weather Data:** Retrieve daily and hourly weather forecasts, current conditions, and daily index data from data providers such as OpenWeather or AccuWeather.\\n\\n* **Sports Data:** Retrieve live scores, player statistics, team information, and historical data from virtually any sports team from data providers include TheRundown or SportsDataIO.\\n\\n* **DeFi Data:** Real-time and historical cryptocurrency price data, market analysis, and other vital metrics across a multitude of exchanges from data providers such as CryptoCompare.\\n\\n* **Real-World Asset Data:** Physical and traditional assets such as cash, commodities, equities, bonds, credit, artwork, and intellectual property from professional data providers (e.g. Kelly Blue Book for cars), independent/expert appraisers, exchanges/OTC markets, or any customized aggregation of data sources.\\n\\n* **IoT Data:** Supply chain tracking, accounting transparency, health wearables, consumption and pollution, parametric insurance that tracks rainfall, GPS sensors, and more.\\n\\n**Chainlink oracles can return data from anywhere on the internet.** For more ideas, we recommend looking into Chainlink\'s blog on the [77 different use cases enabled by Chainlink](https://blog.chain.link/smart-contract-use-cases/). Additional custom data feed examples that walk you through building a custom data feed can be found within our [website\'s documentation](/services/direct-request-jobs/Any-API-Guide).\\n> *If you are interested in the in-depth mechanics of how direct requests to Chainlink nodes work, feel free to check out our [direct request guide](/knowledgebase/Direct-Request-Guide).*\\n\\nWithout further ado, here are the 7 steps for requesting a custom Chainlink data feed.\\n\\n## **Step 1**: Finding a suitable Chainlink node operator\\n\\n:::tip\\nCheck out our article on [How to Find a Chainlink Oracle](/blog/How-To-Find-A-Chainlink-Oracle) for detailed information on how to find a Chainlink oracle.\\n:::\\n\\nWorking with a knowledgeable and competent Chainlink node operator can greatly streamline the process of requesting and building a custom data feed, allowing you or your team to allocate resources more efficiently to your Web3 application. Furthermore, a node operator should possess the expertise to assist in crafting your smart contract code, conducting code reviews, and suggesting gas optimization strategies within your smart contract. This not only saves time, but can also preserve valuable funds with each data request to the Chainlink oracle.\\n\\nHere\'s what you should look for when it comes to a Chainlink node operator:\\n\\n1. Trustworthy and reliable.\\n\\n1. A proven track record.\\n\\n1. Strong communication skills.\\n\\n1. Transparent and clearly-defined pricing.\\n\\n1. Reliable, secure, and redundant infrastructure.\\n\\n1. Knowledgeable in Solidity.\\n\\n1. A well-defined process for requesting custom data feeds.\\n\\n1. Continuous monitoring of each data feed request pipeline.\\n\\n1. A clear service-level agreement (SLA) for their data feed performance.\\n\\n> *At LinkWell Nodes, we do our best to align with these characteristics and qualities.*\\n> *Our services include [custom data feed capabilities and self-service oracle solutions](/services/direct-request-jobs/Jobs-and-Pricing) across 14 mainnet and 13 testnet blockchains, as well as a wide array of [development services](/services/Development-Services) designed to cater to the diverse needs of your Web3 project.*\\n\\n## **Step 2**: Communicating your data requirements\\n\\nAfter selecting a Chainlink node operator, you\'ll want to succinctly convey to them the requirements of your Web3 project. It is beneficial to provide the following information to facilitate effective collaboration:\\n\\n1. **Blockchain network:** The blockchain network you plan on deploying your application on.\\n\\n1. **Data type:** The type of data you are requesting (i.e., uint256, string[], bool, etc.).\\n\\n1. **Desired frequency:** The expected frequency of the request to the oracle (i.e. once a day, once a minute, etc.).\\n\\n1. **External adapter requirements:** External adapters exist to perform a variety of custom logic against diverse range of off-chain resources. These resources encompass premium data providers, authenticated web APIs, IoT sensors, bank payments, enterprise back-ends, other blockchain networks, and various other sources.\\n\\n1. **Urgency:** How soon do you need your new data feed up & running?\\n\\n1. **Decentralization requirements:** Would you find it acceptable to have one Chainlink node operations team managing your data feed using multiple redundant Chainlink nodes, or do you specifically require the involvement of multiple node operator teams?\\n\\n1. **Other Chainlink services:** Do you require additional Chainlink services such as [Automation](https://docs.chain.link/chainlink-automation) or [VRF](https://docs.chain.link/vrf) to be implemented within your smart contract?\\n\\n1. **API endpoint:** What HTTP URL do you need to request data from? Does it require an API key, a request body, or any headers? Sending a sample CURL command to the node operator should be sufficient here. Example below:\\n\\n\\t```\\n\\tcurl https://myApi.com/BTC/USD --request POST --header \\"X-Auth-Key: my-api-key-123\\" --data \'{\\"interval\\": 1, \\"count\\": 10}\'\\n\\t```\\n\\n:::tip\\nTo simplify the process of requesting data, we ask that you fill out our specialized [request form](https://linkwellnodes.io/Getting-Started.html). Once we receive your submission, we\'ll make every effort to respond promptly and provide your custom data feed ASAP (typically within the day).\\n:::\\n\\n## **Step 3**: Developing and deploying your testnet smart contract\\n\\nAlthough you may have already commenced the development of your smart contract before reaching out to a Chainlink node operator, you may need to modify it to suit your chosen oracle\'s requirements.\\n> *At LinkWell Nodes, we provide [comprehensive code samples](https://github.com/LinkWellNodes/Documentation/blob/main/docs/services/direct-request-jobs/mainnets/Arbitrum-One/uint256/uint256.sol#L48-L56) to help you get started on your contract development. These examples serve as a valuable resource in kick-starting your smart contract development, or incorporating our data feeds into your existing smart contract.*\\n\\n### Key methods within your smart contract\\n\\n1. **The constructor:** Here you\'ll typically specify the [Chainlink (LINK) token contract address](https://docs.chain.link/resources/link-token-contracts) for your respective chain, the oracle address, the job ID, and the per-request payment amount. Oracle addresses, job IDs, and payment amounts are provided by (or negotiated with) your chosen node operator.\\n\\t```\\n    constructor() ConfirmedOwner(msg.sender) {\\n        _setChainlinkToken(0x0Fd9e8d3aF1aaee056EB9e802c3A762a667b1904);\\n        setOracleAddress(0xd36c6B1777c7f3Db1B3201bDD87081A9045B7b46);\\n        setJobId(\\"a8356f48569c434eaa4ac5fcb4db5cc0\\");\\n        setFeeInHundredthsOfLink(0);     // 0 LINK\\n    }\\n\\t```\\n\\n2. **The request function:** The request function (also called the transferAndCall() or _sendOperatorRequest() function) defines your request characteristics, and sends the request (and payment) to the Chainlink oracle.\\n\\n\\t```\\n    function request() public {\\n    \\n        Chainlink.Request memory req = _buildOperatorRequest(jobId, this.fulfill.selector);\\n        \\n        // DEFINE THE REQUEST PARAMETERS (example)\\n        req._add(\'method\', \'GET\');\\n        req._add(\'url\', \'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH&tsyms=USD,EUR\');\\n        req._add(\'headers\', \'[\\"content-type\\", \\"application/json\\"]\');\\n        req._add(\'body\', \'\');\\n        req._add(\'contact\', \'\');     // PLEASE ENTER YOUR CONTACT INFO. this allows us to notify you in the event of any emergencies related to your request (ie, bugs, downtime, etc.). example values: \'derek_linkwellnodes.io\' (Discord handle) OR \'derek@linkwellnodes.io\' OR \'+1-617-545-4721\'\\n        \\n        // The following curl command simulates the above request parameters: \\n        // curl \'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH&tsyms=USD,EUR\' --request \'GET\' --header \'content-type: application/json\'\\n        \\n        // PROCESS THE RESULT (example)\\n        req._add(\'path\', \'ETH,USD\');\\n        req._addInt(\'multiplier\', 10 ** 18);\\n    \\n        // Send the request to the Chainlink oracle        \\n        _sendOperatorRequest(req, fee);\\n    }\\n\\t```  \\n\\n\\t> *LinkWell Nodes implements a unique and innovative approach that allows for greater control over building your request, but requires a few additional parameters be set (as in the above example).*\\n\\t>\\n\\t> ***Please refer to our [oracle documentation](/services/direct-request-jobs/Jobs-and-Pricing) when building your request - especially in regards to these required request parameters.***\\n\\n3. **The fulfill function:** Once the data has been retrieved, parsed, and converted into a blockchain-compatible format, our oracle node executes a blockchain transaction against the oracle contract, which in turn writes the data back to your consumer contract via execution of your fulfill() function.\\n\\n\\t```\\n    uint256 public response;\\n    \\n    // Receive the result from the Chainlink oracle    \\n    event RequestFulfilled(bytes32 indexed requestId);\\n    function fulfill(bytes32 requestId, uint256 data) public recordChainlinkFulfillment(requestId) {\\n     // Process the oracle response\\n        // emit RequestFulfilled(requestId);    // (optional) emits this event in the on-chain transaction logs, allowing Web3 applications to listen for this transaction\\n        response = data;     // example value: 1875870000000000000000 (1875.87 before \\"multiplier\\" is applied)\\n    }\\n\\t```\\n\\n### Now, deploy it!\\n\\nNow that your smart contract\'s been drafted up, it\'s time to deploy it to the testnet of your choice, so that you can validate your request logic in a low-risk environment before deploying onto a mainnet. If you need guidance during this process, you can refer to a brief [YouTube tutorial on Remix](https://www.youtube.com/watch?v=vH8T3In6ZkE) by EatTheBlocks. We are happy to assist as well!\\n> *LinkWell Nodes offers free Chainlink oracle requests on all blockchain testnets, as part of our dedication to supporting the Chainlink community and assisting new Web3 developers.\\n> We encourage Web3 developers to [take advantage](/services/direct-request-jobs/testnets) of this opportunity to submit their requests without any cost.*\\n\\n<center><iframe width=\\"560\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/vH8T3In6ZkE\\" frameborder=\\"0\\" allowfullscreen></iframe></center>\\n\\n## **Step 4**: Testing your smart contract\\n\\nNow comes the fun part - executing the request logic against the oracle specified in your constructor method.\\n\\nYour first step is to deploy your smart contract code using the [Remix IDE](https://remix.ethereum.org/). After deploying the contract, the next step is to trigger the `transferAndCall()` function (sometimes called the `request()` or `_sendOperatorRequest()` function, highlighted in purple below) within your consumer contract.\\n\\n![Remix Figure 1](./Remix_Diagram_1.webp)\\n\\nOnce your data has successfully been retrieved and parsed, our oracle node executes a blockchain transaction against the oracle contract, which in turn writes the data back to your consumer contract via its `fulfill()` function. Receiving your response may take up to 60 seconds - depending on your chosen blockchain\'s block time.\\n\\nClicking the response button highlighted in purple below should return the data from your request.\\n> *If your contract hasn\'t received a response after waiting 2 minutes, you may have an issue with your request, response, or API endpoint. Please check out our relevant [FAQ topic](/knowledgebase/faq/Chainlink-Users#im-not-getting-a-response-back-to-my-consumer-contract) for more troubleshooting information.* \\n\\n![Remix Diagram 2](./Remix_Diagram_2.webp)\\n\\nOnce the data has been returned, you are free to utilize that data within your smart contract for whatever purpose you need.\\n\\n## **Step 5**: (optional) Optimizing your smart contract\'s request and fulfill functions\\n\\nThis step is marked as optional, as it is geared towards advanced users and/or use cases.\\n\\nReducing the gas costs incurred by the Chainlink node operator in writing your result to your smart contract generally lowers the LINK they\'ll need to charge you per request. Therefore, it is typically advisable to optimize your `fulfill()` function\'s gas usage, in order to increase the overall cost-effectiveness of your Chainlink requests.\\n\\n> **Pro tip**: If your transaction is failing due to an \'out of gas\' error, you have several options: A) Provide a smaller response, B) Divide your request into multiple oracle transactions, or C) Reach out to the relevant oracle team to request an increased gas allowance for your specific use case (which may lead to higher per-request pricing).\\n\\nAs previously mentioned, optimizing your smart contract\'s `request()` and `fulfill()` functions is a service we offer as part of our [development services](/services/Development-Services).\\n\\nOne other key point - gas prices can be unpredictable, especially when deploying your application on the Ethereum network. In the event of a significant surge in gas prices, the costs incurred by the node operator will spike as well. This forces many node operators to price their data feeds at higher rate to balance out the losses incurred by these market spikes. Consulting with your node operator beforehand on their pricing model may lead to informative conversations here. Whenever possible, we strongly recommend deploying your Web3 application on a layer 2 network such as Arbitrum or Optimism.\\n\\n## **Step 6**: Deploying your smart contract to mainnet\\n\\nIn this step, we\'ll discuss the deployment of your smart contract to a mainnet blockchain.\\n\\nOne notable difference when transitioning from a testnet oracle request to a mainnet oracle request is that your mainnet requests that you send require a nominal fee in the form of the LINK token (usually around 0.1 LINK, depending on the blockchain network and data type). For this reason, it is necessary to fund your smart contract with LINK in order to accommodate the anticipated request volume for your Web3 application.\\n\\nAfter deploying and funding your mainnet contract, we suggest executing your `request()` function at least once to ensure your functionality is working as expected.\\n> At LinkWell Nodes, we strive for transparency and efficiency around our pricing model. For a comprehensive understanding of the factors that influence our data feed pricing, you can explore our [pricing page](/services/direct-request-jobs/Pricing).\\n>\\n> **Our commitment is to offer the most competitive pricing in the market.** Deploying your contract initially onto a testnet and making a few requests to our oracles can help us significantly in gauging the lowest-possible pricing for your custom data feed.\\n\\n## **Step 7**: Go live with your Web3 application\\n\\nCongratulations on reaching this point!\\n\\nNow that your application\'s data pipeline is fully deployed, you\'ll need to find some users to interact with your newly-minted and Chainlink-secured Web3 application.\\n\\nHere are some final recommendations for your Chainlink integration:\\n\\n1. **Implement Other Chainlink Services:** Your smart contract development journey doesn\'t need to end with custom data feeds. Chainlink offers a diverse array of supplementary services that can further elevate the potential of your projects. Chainlink Automation, for example, can be an enhancement for automating the request() function to your custom data feed.\\n\\n1. **Communication:** Practice keeping an open line of communication with your chosen Chainlink node operator to ensure a rapid response in the event of any issues, downtime, or changes you might like them to make.\\n\\n1. **Monitoring:** Ensure that your selected Chainlink node operator consistently monitors the request pipeline of your custom data feed. To this end, ask them what their alerting policy is for their mainnet data feeds (if any). This vigilance helps to keep your Web3 application safe in the event of any integration issues, such as your API endpoint failing to respond to your oracle\'s requests.\\n\\n\\t> *At LinkWell Nodes, it is our mission to provide transparency, security, and ownership over all of your data delivery needs. Check out our [Service-Level Agreement (SLA)](/services/direct-request-jobs/Service-Level-Agreement) for more information here.*\\n\\n## Conclusion\\n\\nWith the proper knowledge and understanding in place, navigating the process of requesting, building, and integrating a Chainlink data feed should not only be seamless - it should be fun and exciting as well! We sincerely hope that this guide serves as a solid foundation for Web3 teams looking to integrate Chainlink\'s powerful Web3 services and capabilities into their smart contracts.\\n\\n**Looking for a way to get involved?** Join a team and participate in a hackathon hosted by Chainlink. Hackathons are a great opportunity to enhance your Web3 knowledge, network among like-minded Web3 professionals, meet industry leaders, and even win some cool prizes!\\n\\n---\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/Chainlink-Any-API-Direct-Requests-Vs-Functions","metadata":{"permalink":"/blog/Chainlink-Any-API-Direct-Requests-Vs-Functions","source":"@site/blog/Chainlink-Any-API-Direct-Requests-Vs-Functions/index.md","title":"Chainlink Any API: Direct Request vs. Functions","description":"Exploring the pros and cons of Chainlink\'s Direct Requests vs. Functions - a guide for Web3 developers for off-chain data retrieval and computation.","date":"2024-01-17T00:00:00.000Z","formattedDate":"January 17, 2024","tags":[{"label":"chainlink","permalink":"/blog/tags/chainlink"},{"label":"oracle","permalink":"/blog/tags/oracle"},{"label":"data","permalink":"/blog/tags/data"},{"label":"functions","permalink":"/blog/tags/functions"},{"label":"any api","permalink":"/blog/tags/any-api"},{"label":"web3","permalink":"/blog/tags/web-3"},{"label":"blockchain","permalink":"/blog/tags/blockchain"}],"readingTime":9.47,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"}],"frontMatter":{"title":"Chainlink Any API: Direct Request vs. Functions","description":"Exploring the pros and cons of Chainlink\'s Direct Requests vs. Functions - a guide for Web3 developers for off-chain data retrieval and computation.","date":"2024-01-17","keywords":["chainlink","oracle","data","functions","any api","web3","blockchain"],"authors":["Ken"],"tags":["chainlink","oracle","data","functions","any api","web3","blockchain"]},"prevItem":{"title":"Requesting a Custom Any API Chainlink Data Feed: A 7 Step Guide For Web3 Developers","permalink":"/blog/Requesting-A-Custom-Chainlink-Data-Feed-Using-Any-API"},"nextItem":{"title":"Introduction","permalink":"/blog/Introduction"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\n<h2 class=\'lw-subtitle\'>Exploring the pros and cons of Chainlink\'s Direct Requests model - a guide to off-chain data retrieval and computation for Web3 developers.</h2>\\n\\n![Chainlink Any API - Direct Request vs. Functions](./Header.webp \\"Chainlink Any API - Direct Request vs. Functions\\")\\n\\n\x3c!--truncate--\x3e\\n\\n---\\n\\n**On this page**:\\n\\n<TOCInline\\n  toc={toc.filter((node) => node.level >= 1)}\\n  minHeadingLevel={2}\\n  maxHeadingLevel={2}\\n/>\\n\\n---\\n\\n## Direct Requests vs. Functions: How to decide?\\n\\nNavigating the ever-evolving landscape of Chainlink and its integrations within the Web3 ecosystem can at times be daunting.\\n\\nSince its inception, Chainlink has evolved at a rapid rate. One of the original services provided by Chainlink\'s decentralized oracle network was [Direct Request jobs](https://docs.chain.link/any-api/introduction) (also known as \\"Any API\\") \u2014 Chainlink\'s first iteration of a solution to help bridge the gap between on-chain and off-chain data. While it worked effectively, there were inherent shortcomings that eventually prompted the release of [Chainlink Functions](https://docs.chain.link/chainlink-functions), marking an improvement in security, reliability, and self-service capabilities.\\n\\n:::tip\\n### Looking for a Chainlink oracle, oracle address, or job id?\\nView our [Chainlink data feeds documentation](/services/direct-request-jobs/Jobs-and-Pricing), which has everything you need to get started requesting data from our reliable, distributed oracle infrastructure.\\n:::\\n\\n### Are Direct Requests still viable?\\n\\nWe would argue that they are. \\n\\nMake no mistake: Chainlink Functions is a monumental enhancement for off-chain computation and data retrieval, and we believe that Web3 teams should consider using Functions if and when applicable.\\n\\n> *Disclaimer: All views below are strictly our own, and not the views or opinions of Chainlink Labs. As a community-based Chainlink node operations team with extensive [Chainlink Direct Request service offerings](/services/direct-request-jobs/Jobs-and-Pricing), we acknowledge our potential bias in writing on this topic. In that vein, we promise to be as objective as possible in assessing the relevance of both approaches.*\\n\\nWhile Chainlink Functions reigns supreme in many ways to the traditional Direct Request model, there are pros and cons to each approach. Having a nuanced understanding acknowledges the fact that Direct Requests can still be a relevant option for off-chain data data retrieval and computation, depending on your use case.\\n\\nOur objective here is to illuminate this choice for Web3 developers, who might be faced with the challenge of selecting one over the other.\\n\\n## **Chainlink Direct Requests (Any API)**: Pros and Cons\\n\\n<iframe width=\\"100%\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/ay4rXZhAefs?si=Rat05_PI4LfNU1dJ\\" title=\\"Requesting data from a Chainlink oracle using Any API (Direct) Requests\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nDirect Requests are the first iteration of Chainlink\'s service offerings that allow Web3 teams to write off-chain data (ie, data from the internet) to the blockchain. With their initial release, Direct Requests enabled a wide array of use cases across many industries ranging from finance, to insurance, to NFTs, and more.\\n\\nMore specifically, Direct Requests allow for a smart contract developer to make ad-hoc requests to an existing Chainlink node (oracle), which in turn responds by writing the requested value(s) back to the requestor\'s smart contract. In short, Direct Requests allow smart contracts to request data from the internet in a secure way.\\n\\nWhile our [documentation](/knowledgebase/Direct-Request-Guide) elaborates much more extensively on the mechanics of Direct Request jobs, here\'s a high-level overview:\\n\\n1. A smart contract (i.e., ChainlinkClient) \u2014 also known as a \'consumer contract\' \u2014 makes a request to an on-chain oracle contract, typically owned and operated by a Chainlink node operator.\\n2. The relevant Chainlink node receives the request, interacts with the relevant API endpoint via HTTP, and writes the requested data back to the consumer contract.\\n3. The Web3 application reads the data from the consumer contract and executes the desired business logic based on this data.\\n\\nThe following diagram illustrates a direct request to a Chainlink node via the manual triggering of the smart contract\'s request function. This request may be triggered via MetaMask, Chainlink Automation, web3.js call to an RPC endpoint, or any other means.\\n\\n![Chainlink Direct Request Diagram](./Chainlink-Direct-Request-Diagram.webp \\"Chainlink Direct Request Diagram\\")<center>**Figure 1**: Chainlink Direct Request Model</center>\\n\\n\\nUntil recently, Direct Requests were the only viable solution for Web3 developers looking to securely write external data on-chain. Since its inception, Direct Requests have successfully been implemented by hundreds of teams within the [Chainlink Ecosystem](https://www.chainlinkecosystem.com/ecosystem).\\n\\nAnd yet \u2014 inherent shortcomings within the Direct Request model have precipitated the emergence of Chainlink Functions.\\n\\n### Drawbacks of the Direct Request model\\n\\n1. **Searching for a Suitable Chainlink Node Operator**-\u200aTo make a direct request, Web3 developers must first find a suitable node operator via [Chainlink\'s official Discord server](https://discord.com/invite/chainlink) (#operator-requests channel).\\n2. **Reliability Concerns** \u2014 Within distributed and decentralized systems, single points of failure (SPOFs) are not ideal. Selecting a single Chainlink node operator \u2014 especially one not well-versed in an elastic, redundant infrastructure design- can lead to availability and reliability concerns.\\n3. **Centralization Risks** \u2014 Entrusting data to a single Chainlink node operator poses trust issues, wherein a nefarious node operator could potentially manipulate data before writing it on-chain.\\n4. **External Adapters** \u2014 Direct Requests must offload any advanced logic (ie, complicated parsing or post-processing of data) to an external adapter (EA) \u2014 a small, server-side runtime that hosts such functionality. Some oracles (such as us!) offer this service for free, whereas others require you to write or provide your own external adapter.\\n\\nAs a result of these drawbacks, some Web3 developers have resorted to running their own Chainlink node in order to mitigate security and trust concerns. Yet, running a production-grade Chainlink infrastructure demands [substantial effort](/knowledgebase/faq/Chainlink-Operators#profitability), diverting valuable resources (both financial and otherwise) that could otherwise be spent on application development.\\n\\n> *&nbsp;**A short plug**: At LinkWell Nodes, we offer a robust suite of Direct Request service offerings that mitigates many of the above shortcomings. By following our [Direct Request API documentation](/services/direct-request-jobs/Jobs-and-Pricing), you\'ll be able to develop a self-service Any API solution, and be up and running in minutes.*\\n> \\n> *We also offer a comprehensive list of free service offerings to all customers, including free external adapter development, hosting, [data security guarantee](/services/direct-request-jobs/Service-Level-Agreement), and 24/7 monitoring of your direct request infrastructure.*\\n\\n---\\n\\n## **Chainlink Functions**: Pros and Cons\\n\\nAs a result of the historic challenges with Direct Requests, [Chainlink Functions](https://docs.chain.link/chainlink-functions) emerged as a decentralized, self-service alternative in March 2023. Chainlink Functions executes all request logic on a DON (Decentralized Oracle Network), instead of via a single Chainlink Oracle \u2014 thereby minimizing concerns around centralization and reliability.\\n\\nIt\'s worth mentioning that Chainlink Functions operates via a self-service request model: users write their request functionality in JavaScript (JS), and a network of node operators executes the logic and returns the response.\\n\\n![Chainlink Functions](./Chainlink-Functions-Diagram.webp)<center>**Figure 2**: Chainlink Functions request model</center>\\n\\n\\nFrom [Chainlink\'s blog](https://blog.chain.link/introducing-chainlink-functions/), major benefits of Functions include:\\n\\n* **Trust-minimized security:** Build upon time-tested decentralized infrastructure that already helps secure billions of dollars for Web3 apps.\\n* **Self-service model:** Get started in minutes with Functions\' serverless development solution, which features a CLI, starter kits, and a debugging environment.\\n* **Serverless runtime environment:** Run JavaScript (JS) code in a serverless manner so that you can focus less on infrastructure (ie, writing an external adapter), and more on your core application.\\n\\nThe accessibility brought by Functions fundamentally transforms the landscape for Web3 developers, opening boundless opportunities for smart contracts to interact with the real world in a trust-minimized manner.\\n\\n### Drawbacks of Chainlink Functions\\n\\nDespite the obvious benefits and allure of Chainlink Functions, certain [limitations](/knowledgebase/faq/Chainlink-Users#limitations-of-chainlink-functions) do need consideration:\\n\\n1. **Limited Beta:** Functions is currently in limited Beta. Chainlink\'s documentation currently states that \\"developers must follow best practices and not use the Beta for any mission-critical application or secure any value\\". Furthermore, Functions is only live on four mainnets at the time of this writing \u2014 Ethereum, Polygon, Arbitrum, and Avalanche (you can check the most up-to-date list of networks here).\\n2. **Service Limits:** Functions imposes several service limitations (ie, gas cost, execution time, and idempotence of your business logic) which you can view within [Chainlink\'s documentation](https://docs.chain.link/chainlink-functions/resources/service-limits).\\n3. **Must program your own request in JavaScript (JS):** Lastly, in order to use Chainlink Functions, you\'ll need to write your own request and response logic using JavaScript (JS). This may be a limitation for some users.\\n\\nWhile Chainlink Functions will almost certainly continue to evolve, the current state of the above limitations may give some users pause for production Web3 applications.\\n\\nIn the mean time, if you are a Web3 developer or project with time-sensitive requirements for off-chain data and/or computation for your mainnet applications, but are concerned about the above limitations, you ultimately have three options: 1) Wait for Functions to evolve and mature more to support your use case, 2) Implement Functions as-is, or 3) Utilize the Direct Request model (ie, reach out to an existing node operator, such as [ourselves](/services/direct-request-jobs/Jobs-and-Pricing)).\\n\\n### Pros of Chainlink Direct Requests\\n\\nGiven some of the above limitations of Functions, the advantages of Chainlink\'s Direct Request model for some use cases becomes a bit more clear:\\n\\n1. **Maturity:** Direct Requests have a longer-standing track record and established familiarity among developers. This maturity may simplify integration for some users \u2014 especially ones with projects that have already implemented the Direct Request logic within their systems.\\n2. **Control and Customization:** While Functions provides streamlined and efficient execution, it may not accommodate the specific needs of certain applications which may exceed Function\'s service limitations (ie, gas costs, network support, execution time, etc.).\\n3. **Mainnet Support:** Direct Requests are supported across all mainnet chains that [Chainlink supports](https://docs.chain.link/resources/link-token-contracts).\\n4. **Pricing:** There is also typically a good deal of wiggle room in how much LINK is charged for each Direct Request job, whereas Functions uses a fixed calculation. Additionally, experienced Chainlink node operators can even help out with gas optimization within the client/consumer contracts request and fulfill functions, ultimately enabling them to reduce the amount of LINK charged per request.\\n5. **Human Support:** While power users may not require it, establishing a relationship with an existing node operator via the Direct Request model provides for an experienced human component, and a support team that\'s available when you need the help.\\n\\n---\\n\\n## Conclusion\\n\\nThe debate between Chainlink\'s Direct Requests and the innovative Chainlink Functions capabilities reflects the dynamic evolution within Web3, and more specifically, Chainlink\'s journey to becoming the industry-standard Web3 oracle platform.\\n\\nWhile Chainlink Functions introduces a new realm of efficiency and security within the Chainlink ecosystem for Web3 developers, there are several limitations that warrant consideration. Conversely, while Direct Requests may offer benefits in terms of hands-free implementation, available networks, and pricing, one must consider centralization and reliability risks when making their decision. It\'s clear that each approach offers distinct advantages and limitations \u2014 choosing one will require careful consideration based on the specific needs of your project.\\n\\nAs the Web3 ecosystem continues to evolve, a nuanced understanding of these approaches will help to empower Web3 developers to navigate the complexities of off-chain data retrieval and computation, and implement the best solution for their endeavors.\\n\\nIf you have any questions, please don\'t hesitate to reach out!\\n\\n> _LinkWell Nodes is a U.S.-based Chainlink community oracle, providing custom data feed capabilities and self-service oracle solutions across virtually all major mainnet and testnet blockchains supported by Chainlink._\\n>\\n> _Looking for a custom data feed? Head on over to our [documentation](/), or hop into the [LinkWell Nodes Discord server](https://discord.com/invite/Xs6SjqVPUA) and ask for help!_\\n>\\n> _Disclaimer: all views and opinions expressed in this article are strictly our own._\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x606.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")"},{"id":"/Introduction","metadata":{"permalink":"/blog/Introduction","source":"@site/blog/Introduction/index.md","title":"Introduction","description":"LinkWell Nodes is a U.S.-based Chainlink oracle. Our mission is to support Web3 developers in building a world powered by cryptographic truth.","date":"2023-09-02T00:00:00.000Z","formattedDate":"September 2, 2023","tags":[{"label":"Chainlink","permalink":"/blog/tags/chainlink"},{"label":"Splunk","permalink":"/blog/tags/splunk"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"oracles","permalink":"/blog/tags/oracles"},{"label":"web3","permalink":"/blog/tags/web-3"}],"readingTime":9.265,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"},{"name":"Derek Ricciuto","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/derek-ricciuto","imageURL":"/img/derek-ricciuto-100x100.webp","key":"Derek"}],"frontMatter":{"title":"Introduction","date":"2023-09-02","authors":["Ken","Derek"],"tags":["Chainlink","Splunk","AWS","oracles","web3"]},"prevItem":{"title":"Chainlink Any API: Direct Request vs. Functions","permalink":"/blog/Chainlink-Any-API-Direct-Requests-Vs-Functions"},"nextItem":{"title":"Welcome","permalink":"/blog/Welcome"}},"content":"LinkWell Nodes is a U.S.-based Chainlink oracle. Our mission is to support Web3 developers in building a world powered by cryptographic truth.\\n\\n![LinkWell Nodes - U.S.-based Chainlink node operator](/img/lw-banner_1080x485_Docs-Home.webp \\"LinkWell Nodes - U.S.-based Chainlink node operator\\")\\n\\n\x3c!--truncate--\x3e\\n\\nIt\'s hard to believe how far Chainlink has come in the span of just five years. From their first white paper in 2017 in which Chainlink proposed a solution to the oracle problem, a problem once thought unsolvable, but refers to the inherent inability of blockchains to access external data, to their recent announcement on their collaboration with SWIFT and 12+ financial institutions, Chainlink has slowly but surely been fulfilling their destiny of becoming a global standard.\\n\\nFrom the start, Chainlink has kept their nose to the grindstone, caring little for media attention or community hype for the first several years, and instead focusing their efforts on researching, developing and building. Last year\'s SmartCon felt like an inflection point for Chainlink after former Google CEO Eric Schmidt\'s Fireside chat with Chainlink CEO Sergey Nazarov in which Eric pressured Sergey to just come out and announce Chainlink\'s true plan\u200a-\u200afor Chainlink to have a presence in virtually every aspect of Web3.\\n\\nAnd after enabling $7 trillion in transaction value, integrating with over 1,700 Web3 projects and the development of CCIP (which is launching soon), it\'s safe to say that their plan for total world domination (just kidding, kind of) has slowly but surely been coming to fruition.\\n\\nAt LinkWell Nodes, we liken ourselves to Chainlink in a sense. While perhaps not on such a large or epic scale, we too have been keeping our nose to the grindstone, researching, developing and building. And after over a year of hard work and dedication building out our Chainlink node infrastructure, we decided it was time to step out of the shadows and formally announce what we\'ve been working on, and what we have in store.\\n\\nBut before we do, you may be wondering, where did these LinkWell Nodes guys come from? What are they all about, and who are they? Well, hold on to your tendies, as it\'s time for a short bedtime story.\\n\\n## Our Story\\nLinkWell Nodes\' story began shortly after the 2022 Chainlink Oracle Olympics\u200a-\u200aa global competition of 30 professional teams vying for the right to become the next official Chainlink node operator. As individual participants during the competition, we (Ken and Derek\u200a-\u200aLinkWell Nodes\' co-founders) ended up tying for third place\u200a-\u200apassing every challenge that Chainlink threw at us, but just barely missing out on the bonus points which cinched the victory for the winning team\u200a-\u200aNorthWest Nodes.\\n\\nKen likes to blame his wife for being pregnant and giving birth to his second daughter during the last two days of the competition, but all jokes aside, Ken and Derek decided to join forces, and shortly after, LinkWell Nodes was formed.\\n\\nAs a freshly minted Chainlink node operations team, we immediately went back to the drawing board with an initial vision of designing and engineering the most sophisticated and elegant Chainlink node deployment model that we could possibly devise, with scalability, redundancy, and security at the forefront. With Ken\'s area of expertise in cybersecurity and Splunk (an enterprise grade monitoring platform), and Derek\'s area of expertise as a full-stack developer, and our combined expertise with AWS and Chainlink node operations, the path forward was clear.\\n\\nAfter over a year of aggressive engineering efforts in the infrastructure, monitoring, and cybersecurity space with our three favorite technologies\u200a-\u200aAWS, Splunk, and Chainlink, we think that we were able to succeed in fulfilling that vision.\\n\\nFurthermore, we designed our Chainlink infrastructure stack to be easily deployable and reusable, while keeping members of the Chainlink community desiring to spin up their own nodes as quickly and easily as possible, in mind. As a part of our mission to support the Chainlink community, we may be open sourcing some or all of our stack, but more on that later.\\n\\n## Our Mission\\nLed by truth over trust. Driven to innovate, build and create. Our mission is to support Chainlink in enabling developers, startups and enterprises unlock the true value of Web3.\\n\\nUltimately, we want to help Chainlink fulfill its mission by doing whatever we can to support the Chainlink community. As community-based Chainlink node operators, we are limited to what services we can provide, but that isn\'t stopping us from going above and beyond the call of duty.\\n\\nAfter spinning up 5 mainnet chains, 6 testnet chains, over 130 direct request jobs and robust documentation to boot, LinkWell Nodes\' present objective is to deliver secure, reliable, on-chain data to the general public, all while continuing to innovate on the back-end and supporting the community on the front-end.\\n\\nLinkWell Nodes has its eyes set on eventually becoming an official node operator, but more importantly, being recognized as one of the most reliable, communicative, and supportive Node Operator teams present in the Chainlink (and broader Web3) ecosystem.\\n\\nWhile we recognize that Functions, recently released, is a superior method in many ways to the traditional direct request model, it is still in beta, and currently comes with a few limitations. You can check out our FAQ in order to understand our stance on Functions a bit more in-depth, but at this time, we think there is still a desire and need for traditional direct request support.\\n\\nThat\'s why we have devoted significant efforts in building out (what we believe) is the most comprehensive set of Chainlink node job offerings and documentation in the public sphere today. Our aim with this effort is to set a new standard for Chainlink community support, and to provide Web3 developers with their off-chain data needs as effortlessly and seamlessly as possible.\\n\\n## What We Have In Store\\nFortunately, we aren\'t putting all of our eggs in the direct request basket. We\'ve also recognized how challenging it can be for newer Chainlink node operators who don\'t have as much knowledge or experience as we do with deploying, operating and maintaining Chainlink nodes.\\n\\nAfter noticing the same questions arise over and over again in some of the more popular Chainlink Discord channels, we started building out an FAQ that we hope can act as the start of a knowledge base within our public documentation for both aspiring Chainlink node operators and consumers alike. As an aside, we have our own Discord channel as well if you\'d like to pop in and join our small but growing community, or if you are a developer in need of support!\\n\\n## Chainlink Deployment Model In AWS\\nAdditionally, as alluded to earlier, we may have plans in place to open source our Chainlink infrastructure stack for other members of the community to use. We aren\'t providing any guarantees or timelines on a public release at this time, but if there is enough demand and excitement for this release, we will be happy to move forward with it.\\nTo summarize what that release would look like, however, it would be similar to the AWS Quickstart in that after some basic AWS account setup, a new user would simply fill out an AWS Cloudformation template, hit the deploy button, and be up and running with Chainlink node infrastructure in the time it takes to sip your morning coffee.\\n\\nOne of the major design choices we made with our Chainlink infrastructure deployment model was to make the actual deployment as simple and flexible as possible, with multiple deployment architectures in AWS. Looking to simply spin up a testnet Chainlink node in a public subnet with a 3rd party RPC connection for fast and easy access? We support that.\\n\\nWhat about a highly-available and secure architecture with Chainlink nodes, external adapters and full nodes, and with auto-scaling and load balancing built in? We support that as well across all 5 mainnet chains and 6 testnet chains, all via Infrastructure as Code (IAC), with support for more chains to come in the future. What about monitoring and alerting? Out of the box, we include automatic Cloudwatch monitoring and alerting.\\n\\n## Splunk Integration\\nBut one of the features we are most excited to share is our deep integration with Splunk. While our Splunk integration deserves a separate blog or two on its own (stay posted for that), Splunk is one of the most, if not the most powerful enterprise grade monitoring, alerting and analytics tool on the market today. For the ninth time running, Splunk was named a \\"Leader\\" in Gartner\'s 2022 Magic Quadrant (MQ) for Security Information and Event Management (SIEM).\\n\\nTireless efforts were made to not only automatically deploy and configure Splunk within our Cloudformation templates at the flip of a switch, but to also automatically forward all Chainlink infrastructure logs directly into Splunk upon instance boot, if desired to do so.\\n\\nAs we were able to engineer this solution from the ground up, the infrastructure logs and metrics coming from Chainlink nodes, databases, full nodes and external adapters, to name some of the major ones, get fired off to Splunk where they are stored, parsed and configured to populate a robust suite of Chainlink monitoring dashboards and alerts that are wrapped up in our custom built Splunk application.\\n\\nWe didn\'t just stop at Chainlink infrastructure logs either, as we have monitoring in place at the AWS account level. Cloudtrail API calls, config changes, IAM actions, VPN activity and more are all forwarded and logged in Splunk. And yes, we have dashboards and alerts for this activity too.\\n\\nAs self-proclaimed trendsetters and innovators with the perfect skill sets and background to bring our Chainlink infrastructure and Splunk monitoring capability to life, we don\'t mention any of this in a boastful manner, but mostly because we are passionate and excited to share what we\'ve developed, and what we have to offer, with the greater Chainlink community.\\n\\nThat being said, it\'s important to note that due to the exhaustive and at times cumbersome nature of configuring and maintaining Splunk, if there were enough interest and demand, we are considering offering Splunk, along with several other very useful of powerful features that we haven\'t mentioned yet, as a set of premium but optional capabilities under a subscription based model.\\n\\nIn a perfect world we\'d open source everything, but for the time being we aren\'t quite there yet, so even a small subscription fee would help our ambitious development efforts towards supporting the Chainlink community. But we can cross that bridge when we get there.\\n\\nLastly, we recognize that there will likely be an endless need for Chainlink educators and content creators. Whether that be educational content geared towards Chainlink node operations, or content geared towards supporting Web3 developers interested in using Chainlink services, we are here to help.\\n\\nWith what feels like a bull market just around the corner coupled with Chainlink\'s seemingly unstoppable momentum, there couldn\'t be a more exciting time to be a part of the Chainlink community, and one can\'t help but wonder what the next 5 years will have in store!\\n\\nIf you are interested in staying tuned, feel free to join our Discord, or follow us on Twitter @LinkWell_Nodes.\\n\\nThanks for reading!"},{"id":"/Welcome","metadata":{"permalink":"/blog/Welcome","source":"@site/blog/Welcome/index.md","title":"Welcome","description":"Welcome to our blog!","date":"2023-09-01T00:00:00.000Z","formattedDate":"September 1, 2023","tags":[{"label":"Chainlink","permalink":"/blog/tags/chainlink"}],"readingTime":2.115,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/ken-reiners-755806167/","imageURL":"/img/ken-reiners-100x100.webp","key":"Ken"},{"name":"Derek Ricciuto","title":"Co-Founder - LinkWell Nodes","url":"https://www.linkedin.com/in/derek-ricciuto","imageURL":"/img/derek-ricciuto-100x100.webp","key":"Derek"}],"frontMatter":{"title":"Welcome","date":"2023-09-01","authors":["Ken","Derek"],"tags":["Chainlink"]},"prevItem":{"title":"Introduction","permalink":"/blog/Introduction"}},"content":"Welcome to our blog!\\n\\nAt our core, we are committed to supporting the Chainlink community in any way we can. Through our expertise as Chainlink node operators and Web3 developers, we strive to provide useful and actionable content to help users and developers navigate the Chainlink ecosystem. We are dedicated to sharing our knowledge and insights to empower individuals and teams in their journey with Chainlink.\\n\\n\x3c!--truncate--\x3e\\n\\nIn this blog, we will cover a wide range of topics that we believe both aspiring Chainlink node operators and Chainlink users (Web3-based developers, projects, or teams) will greatly benefit from. For Chainlink node operators, we will share insights gained from deploying Chainlink nodes over the past few years, as well as our expertise in various industries including cloud, monitoring, security, development, and more.\\n\\nThe topics we will discuss include deploying Chainlink nodes and the associated infrastructure such as full nodes, external adapters, and databases. We will also address lesser-known subjects such as Chainlink node profitability, who should run a node and why, node maintenance, security, monitoring, and much more.\\n\\nWith extensive experience supporting Web3 requests for data via Chainlink, we are also committed to peeling back the curtain when it comes to interacting with Chainlink node operators such as ourselves, and also by providing clear and concise documentation for our direct request Any API services. We have already begun this effort with our [Direct Request Guide](/services/direct-request-jobs/Jobs-and-Pricing) and [Any API Examples](/services/direct-request-jobs/Any-API-Guide), and we will continue to cover all of Chainlink\'s services in future blog posts, including CCIP, VRF, Functions, Automation, Data Feeds, and of course, Any API.\\n\\nAdditionally, we have encountered numerous recurring questions. These questions include: \\"Should I run my own node or utilize existing node operator services?\\", \\"Is running a Chainlink node worth it or profitable?\\", \\"How can I find a node operator for a custom data feed I require?\\", and more. We understand that finding answers to these questions can be challenging, as many of them may not be addressed in Chainlink\'s comprehensive community resources and online documentation. Our [FAQ](/knowledgebase/FAQ), and this blog, aim to provide answers to these questions.\\n\\nWe are thrilled to share our knowledge and expertise with anyone who interacts with Chainlink nodes in any capacity. We hope that you, as the reader, will find value in this blog. If you do, we kindly ask that you consider sharing it on social media! Additionally, feel free to join our Discord community, where you can learn more about specific topics or simply say hello.\\n\\nThank you for reading, and happy exploring!"}]}')}}]);