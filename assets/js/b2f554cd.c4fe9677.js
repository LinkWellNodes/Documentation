"use strict";(self.webpackChunklinkwell_nodes_documentation=self.webpackChunklinkwell_nodes_documentation||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2024/01/17/DR_Jobs_Vs_Functions","metadata":{"permalink":"/blog/2024/01/17/DR_Jobs_Vs_Functions","source":"@site/blog/2024-01-17-DR_Jobs_Vs_Functions/index.md","title":"Chainlink Any API - Direct Request vs. Functions","description":"Navigate Chainlink\'s Direct Requests vs. Functions - A guide for Web3 developers for off-chain data retrieval and computation.","date":"2024-01-17T00:00:00.000Z","formattedDate":"January 17, 2024","tags":[{"label":"chainlink","permalink":"/blog/tags/chainlink"},{"label":"oracle","permalink":"/blog/tags/oracle"},{"label":"custom data feeds","permalink":"/blog/tags/custom-data-feeds"},{"label":"functions","permalink":"/blog/tags/functions"},{"label":"any api","permalink":"/blog/tags/any-api"},{"label":"direct requests","permalink":"/blog/tags/direct-requests"}],"readingTime":8.84,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder LinkWell Nodes","url":"https://github.com/LinkWellNodes","key":"Ken"},{"name":"Derek Ricciuto","title":"Co-Founder LinkWell Nodes","url":"https://github.com/LinkWellNodes","key":"Derek"}],"frontMatter":{"title":"Chainlink Any API - Direct Request vs. Functions","description":"Navigate Chainlink\'s Direct Requests vs. Functions - A guide for Web3 developers for off-chain data retrieval and computation.","keywords":["chainlink","oracle","custom data feed","functions","any api","node operator"],"authors":["Ken","Derek"],"tags":["chainlink","oracle","custom data feeds","functions","any api","direct requests"]},"nextItem":{"title":"Introduction","permalink":"/blog/introduction"}},"content":"![Chainlink Any API - Direct Request vs. Functions](./Header.webp \\"Chainlink Any API - Direct Request vs. Functions\\")\\n\\n**How to choose?**\\n\\nNavigating the ever-evolving landscape of Chainlink and its integrations within the Web3 ecosystem can at times be daunting.\\n\\nSince its inception, Chainlink has evolved at a rapid rate. One of the original services provided by Chainlink\'s decentralized oracle network was [Direct Request jobs](https://docs.chain.link/any-api/introduction) (also known as \\"Any API\\") \u2014 Chainlink\'s first iteration of a solution to help bridge the gap between on-chain and off-chain data. While it worked effectively, there were inherent shortcomings that eventually prompted the release of [Chainlink Functions](https://docs.chain.link/chainlink-functions), marking an improvement in security, reliability, and self-service capabilities.\\n\\nYet, after the release of Functions, a lingering question remains:\\n\\n**Are Direct Requests still viable?**\\n\\n\x3c!--truncate--\x3e\\n\\nWe would argue that they are. \\n\\nMake no mistake: Chainlink Functions is a monumental enhancement for off-chain computation and data retrieval, and we believe that Web3 teams should consider using Functions if and when applicable.\\n\\n> *Disclaimer: All views below are strictly our own, and not the views or opinions of Chainlink Labs. As a community-based Chainlink node operations team with extensive [Chainlink Direct Request service offerings](https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing), we acknowledge our potential bias in writing on this topic. In that vein, we promise to be as objective as possible in assessing the relevance of both approaches.*\\n\\nWhile Chainlink Functions reigns supreme in many ways to the traditional Direct Request model, there are pros and cons to each approach. Having a nuanced understanding acknowledges the fact that Direct Requests can still be a relevant option for off-chain data data retrieval and computation, depending on your use case.\\n\\nOur objective here is to illuminate this choice for Web3 developers, who might be faced with the challenge of selecting one over the other.\\n\\n**Let\'s begin by examining Chainlink Direct Requests (Any API):**\\n\\n<iframe width=\\"100%\\" height=\\"315\\" src=\\"https://www.youtube.com/embed/ay4rXZhAefs?si=Rat05_PI4LfNU1dJ\\" title=\\"Requesting data from a Chainlink oracle using Any API (Direct) Requests\\" frameborder=\\"0\\" allow=\\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\\" allowfullscreen></iframe>\\n\\nDirect Requests are the first iteration of Chainlink\'s service offerings that allow Web3 teams to write off-chain data (ie, data from the internet) to the blockchain. With their initial release, Direct Requests enabled a wide array of use cases across many industries ranging from finance, to insurance, to NFTs, and more.\\n\\nMore specifically, Direct Requests allow for a smart contract developer to make ad-hoc requests to an existing Chainlink node (oracle), which in turn responds by writing the requested value(s) back to the requestor\'s smart contract. In short, Direct Requests allow smart contracts to request data from the internet in a secure way.\\n\\nWhile our [documentation](https://docs.linkwellnodes.io/knowledgebase/Direct-Request-Guide) elaborates much more extensively on the mechanics of Direct Request jobs, here\'s a high-level overview:\\n\\n1. A smart contract (i.e., ChainlinkClient) \u2014 also known as a \'consumer contract\' \u2014 makes a request to an on-chain oracle contract, typically owned and operated by a Chainlink node operator.\\n2. The relevant Chainlink node receives the request, interacts with the relevant API endpoint via HTTP, and writes the requested data back to the consumer contract.\\n3. The Web3 application reads the data from the consumer contract and executes the desired business logic based on this data.\\n\\nThe following diagram illustrates a direct request to a Chainlink node via the manual triggering of the smart contract\'s request function. This request may be triggered via MetaMask, Chainlink Automation, web3.js call to an RPC endpoint, or any other means.\\n\\n![Chainlink Direct Request Diagram](./Chainlink-Direct-Request-Diagram.webp \\"Chainlink Direct Request Diagram\\")<center>**Figure 1**: Chainlink Direct Request Model</center>\\n\\n\\nUntil recently, Direct Requests were the only viable solution for Web3 developers looking to securely write external data on-chain. Since its inception, Direct Requests have successfully been implemented by hundreds of teams within the [Chainlink Ecosystem](https://www.chainlinkecosystem.com/ecosystem).\\n\\nAnd yet \u2014 inherent shortcomings within the Direct Request model have precipitated the emergence of Chainlink Functions.\\n\\n**Shortcomings of the Direct Request model:**\\n\\n1. **Searching for a Suitable Chainlink Node Operator**-\u200aTo make a direct request, Web3 developers must first find a suitable node operator via [Chainlink\'s official Discord server](https://discord.com/invite/chainlink) (#operator-requests channel).\\n2. **Reliability Concerns** \u2014 Within distributed and decentralized systems, single points of failure (SPOFs) are not ideal. Selecting a single Chainlink node operator \u2014 especially one not well-versed in an elastic, redundant infrastructure design- can lead to availability and reliability concerns.\\n3. **Centralization Risks** \u2014 Entrusting data to a single Chainlink node operator poses trust issues, wherein a nefarious node operator could potentially manipulate data before writing it on-chain.\\n4. **External Adapters** \u2014 Direct Requests must offload any advanced logic (ie, complicated parsing or post-processing of data) to an external adapter (EA) \u2014 a small, server-side runtime that hosts such functionality. Some oracles (such as us!) offer this service for free, whereas others require you to write or provide your own external adapter.\\n\\nAs a result of these drawbacks, some Web3 developers have resorted to running their own Chainlink node in order to mitigate security and trust concerns. Yet, running a production-grade Chainlink infrastructure demands [substantial effort](https://docs.linkwellnodes.io/knowledgebase/faq/Chainlink-Operators#profitability), diverting valuable resources (both financial and otherwise) that could otherwise be spent on application development.\\n\\n> *&nbsp;**A short plug**: At LinkWell Nodes, we offer a robust suite of Direct Request service offerings that mitigates many of the above shortcomings. By following our [Direct Request API documentation](https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing), you\'ll be able to develop a self-service Any API solution, and be up and running in minutes.*\\n> \\n> *We also offer a comprehensive list of free service offerings to all customers, including free external adapter development, hosting, [data security guarantee](https://docs.linkwellnodes.io/services/direct-request-jobs/Service-Level-Agreement), and 24/7 monitoring of your direct request infrastructure.*\\n\\n---\\n\\n**Enter Chainlink Functions.**\\n\\nAs a result of the historic challenges with Direct Requests, [Chainlink Functions](https://docs.chain.link/chainlink-functions) emerged as a decentralized, self-service alternative in March 2023. Chainlink Functions executes all request logic on a DON (Decentralized Oracle Network), instead of via a single Chainlink Oracle \u2014 thereby minimizing concerns around centralization and reliability.\\n\\nIt\'s worth mentioning that Chainlink Functions operates via a self-service request model: users write their request functionality in JavaScript (JS), and a network of node operators executes the logic and returns the response.\\n\\n![Chainlink Functions](./Chainlink-Functions-Diagram.webp)<center>**Figure 2**: Chainlink Functions request model</center>\\n\\n\\nFrom [Chainlink\'s blog](https://blog.chain.link/introducing-chainlink-functions/), major benefits of Functions include:\\n\\n* **Trust-minimizated security:** Build upon time-tested decentralized infrastructure that already helps secure billions of dollars for Web3 apps.\\n* **Self-service model:** Get started in minutes with Functions\' serverless development solution, which features a CLI, starter kits, and a debugging environment.\\n* **Serverless runtime environment:** Run JavaScript (JS) code in a serverless manner so that you can focus less on infrastructure (ie, writing an external adapter), and more on your core application.\\n\\nThe accessibility brought by Functions fundamentally transforms the landscape for Web3 developers, opening boundless opportunities for smart contracts to interact with the real world in a trust-minimized manner.\\n\\n**Drawbacks of Chainlink Functions:**\\n\\nDespite the obvious benefits and allure of Chainlink Functions, certain [limitations](https://docs.linkwellnodes.io/knowledgebase/faq/Chainlink-Users#limitations-of-chainlink-functions) do need consideration:\\n\\n1. **Limited Beta:** Functions is currently in limited Beta. Chainlink\'s documentation currently states that \\"developers must follow best practices and not use the Beta for any mission-critical application or secure any value\\". Furthermore, Functions is only live on four mainnets at the time of this writing \u2014 Ethereum, Polygon, Arbitrum, and Avalanche (you can check the most up-to-date list of networks here).\\n2. **Service Limits:** Functions imposes several service limitations (ie, gas cost, execution time, and idempotence of your business logic) which you can view within [Chainlink\'s documentation](https://docs.chain.link/chainlink-functions/resources/service-limits).\\n3. **Must program your own request in JavaScript (JS):** Lastly, in order to use Chainlink Functions, you\'ll need to write your own request and response logic using JavaScript (JS). This may be a limitation for some users.\\n\\nWhile Chainlink Functions will almost certainly continue to evolve, the current state of the above limitations may give some users pause for production Web3 applications.\\n\\nIn the mean time, if you are a Web3 developer or project with time-sensitive requirements for off-chain data and/or computation for your mainnet applications, but are concerned about the above limitations, you ultimately have three options: 1) Wait for Functions to evolve and mature more to support your use case, 2) Implement Functions as-is, or 3) Utilize the Direct Request model (ie, reach out to an existing node operator, such as [ourselves](https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing)).\\n\\n**Pros of Chainlink Direct Requests:**\\n\\nGiven some of the above limitations of Functions, the advantages of Chainlink\'s Direct Request model for some use cases becomes a bit more clear:\\n\\n1. **Maturity:** Direct Requests have a longer-standing track record and established familiarity among developers. This maturity may simplify integration for some users \u2014 especially ones with projects that have already implemented the Direct Request logic within their systems.\\n2. **Control and Customization:** While Functions provides streamlined and efficient execution, it may not accommodate the specific needs of certain applications which may exceed Function\'s service limitations (ie, gas costs, network support, execution time, etc.).\\n3. **Mainnet Support:** Direct Requests are supported across all mainnet chains that [Chainlink supports](https://docs.chain.link/resources/link-token-contracts).\\n4. **Pricing:** There is also typically a good deal of wiggle room in how much LINK is charged for each Direct Request job, whereas Functions uses a fixed calculation. Additionally, experienced Chainlink node operators can even help out with gas optimization within the client/consumer contracts request and fulfill functions, ultimately enabling them to reduce the amount of LINK charged per request.\\n5. **Human Support:** While power users may not require it, establishing a relationship with an existing node operator via the Direct Request model provides for an experienced human component, and a support team that\'s available when you need the help.\\n\\n---\\n\\n**Conclusion**\\n\\nThe debate between Chainlink\'s Direct Requests and the innovative Chainlink Functions capabilities reflects the dynamic evolution within Web3, and more specifically, Chainlink\'s journey to becoming the industry-standard Web3 oracle platform.\\n\\nWhile Chainlink Functions introduces a new realm of efficiency and security within the Chainlink ecosystem for Web3 developers, there are several limitations that warrant consideration. Conversely, while Direct Requests may offer benefits in terms of hands-free implementation, available networks, and pricing, one must consider centralization and reliability risks when making their decision. It\'s clear that each approach offers distinct advantages and limitations \u2014 choosing one will require careful consideration based on the specific needs of your project.\\n\\nAs the Web3 ecosystem continues to evolve, a nuanced understanding of these approaches will help to empower Web3 developers to navigate the complexities of off-chain data retrieval and computation, and implement the best solution for their endeavors.\\n\\nIf you have any questions, please don\'t hesitate to reach out!\\n\\n> *LinkWell Nodes is a U.S.-based Chainlink community oracle.*\\n>\\n> *We provide self-service oracle solutions across 14 mainnet (and 13 testnet) blockchains, and offer free smart contract development and monitoring for all Any API (Direct) requests.*"},{"id":"introduction","metadata":{"permalink":"/blog/introduction","source":"@site/blog/2023-09-02-Introduction/index.md","title":"Introduction","description":"A community based Chainlink node operations team. Led by truth over trust. Driven to innovate, build and create. Our mission is to enable developers, startups and enterprises to unlock the true value of Web3.","date":"2023-09-02T00:00:00.000Z","formattedDate":"September 2, 2023","tags":[{"label":"Chainlink","permalink":"/blog/tags/chainlink"},{"label":"Splunk","permalink":"/blog/tags/splunk"},{"label":"AWS","permalink":"/blog/tags/aws"},{"label":"oracles","permalink":"/blog/tags/oracles"},{"label":"web3","permalink":"/blog/tags/web-3"}],"readingTime":9.305,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder LinkWell Nodes","url":"https://github.com/LinkWellNodes","key":"Ken"},{"name":"Derek Ricciuto","title":"Co-Founder LinkWell Nodes","url":"https://github.com/LinkWellNodes","key":"Derek"}],"frontMatter":{"slug":"introduction","title":"Introduction","authors":["Ken","Derek"],"tags":["Chainlink","Splunk","AWS","oracles","web3"]},"prevItem":{"title":"Chainlink Any API - Direct Request vs. Functions","permalink":"/blog/2024/01/17/DR_Jobs_Vs_Functions"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"A community based Chainlink node operations team. Led by truth over trust. Driven to innovate, build and create. Our mission is to enable developers, startups and enterprises to unlock the true value of Web3.\\n\\n![LWN Logo](./LWN-Banner.jpg)\\n\\nIt\'s hard to believe how far Chainlink has come in the span of just five years. From their first white paper in 2017 in which Chainlink proposed a solution to the oracle problem, a problem once thought unsolvable, but refers to the inherent inability of blockchains to access external data, to their recent announcement on their collaboration with SWIFT and 12+ financial institutions, Chainlink has slowly but surely been fulfilling their destiny of becoming a global standard.\\n\\n\x3c!--truncate--\x3e\\n\\nFrom the start, Chainlink has kept their nose to the grindstone, caring little for media attention or community hype for the first several years, and instead focusing their efforts on researching, developing and building. Last year\'s SmartCon felt like an inflection point for Chainlink after former Google CEO Eric Schmidt\'s Fireside chat with Chainlink CEO Sergey Nazarov in which Eric pressured Sergey to just come out and announce Chainlink\'s true plan\u200a-\u200afor Chainlink to have a presence in virtually every aspect of Web3.\\n\\nAnd after enabling $7 trillion in transaction value, integrating with over 1,700 Web3 projects and the development of CCIP (which is launching soon), it\'s safe to say that their plan for total world domination (just kidding, kind of) has slowly but surely been coming to fruition.\\n\\nAt LinkWell Nodes, a community based Chainlink node operations team, we liken ourselves to Chainlink in a sense. While perhaps not on such a large or epic scale, we too have been keeping our nose to the grindstone, researching, developing and building. And after over a year of hard work and dedication building out our Chainlink node infrastructure, we decided it was time to step out of the shadows and formally announce what we\'ve been working on, and what we have in store.\\n\\nBut before we do, you may be wondering, where did these LinkWell Nodes guys come from? What are they all about, and who are they? Well, hold on to your tendies, as it\'s time for a short bedtime story.\\n\\n## Our Story\\nLinkWell Nodes\' story began shortly after the 2022 Chainlink Oracle Olympics\u200a-\u200aa global competition of 30 professional teams vying for the right to become the next official Chainlink node operator. As individual participants during the competition, we (Ken and Derek\u200a-\u200aLinkWell Nodes\' co-founders) ended up tying for third place\u200a-\u200apassing every challenge that Chainlink threw at us, but just barely missing out on the bonus points which cinched the victory for the winning team\u200a-\u200aNorthWest Nodes.\\n\\nKen likes to blame his wife for being pregnant and giving birth to his second daughter during the last two days of the competition, but all jokes aside, Ken and Derek decided to join forces, and shortly after, LinkWell Nodes was formed.\\n\\nAs a freshly minted Chainlink node operations team, we immediately went back to the drawing board with an initial vision of designing and engineering the most sophisticated and elegant Chainlink node deployment model that we could possibly devise, with scalability, redundancy, and security at the forefront. With Ken\'s area of expertise in cybersecurity and Splunk (an enterprise grade monitoring platform), and Derek\'s area of expertise as a full-stack developer, and our combined expertise with AWS and Chainlink node operations, the path forward was clear.\\n\\nAfter over a year of aggressive engineering efforts in the infrastructure, monitoring, and cybersecurity space with our three favorite technologies\u200a-\u200aAWS, Splunk, and Chainlink, we think that we were able to succeed in fulfilling that vision.\\n\\nFurthermore, we designed our Chainlink infrastructure stack to be easily deployable and reusable, while keeping members of the Chainlink community desiring to spin up their own nodes as quickly and easily as possible, in mind. As a part of our mission to support the Chainlink community, we may be open sourcing some or all of our stack, but more on that later.\\n\\n## Our Mission\\nLed by truth over trust. Driven to innovate, build and create. Our mission is to support Chainlink in enabling developers, startups and enterprises unlock the true value of Web3.\\n\\nUltimately, we want to help Chainlink fulfill its mission by doing whatever we can to support the Chainlink community. As community based Chainlink node operators, we are limited to what services we can provide, but that isn\'t stopping us from going above and beyond the call of duty.\\n\\nAfter spinning up 5 mainnet chains, 6 testnet chains, over 130 direct request jobs and robust documentation to boot, LinkWell Nodes\' present objective is to deliver secure, reliable, on-chain data to the general public, all while continuing to innovate on the back-end and supporting the community on the front-end.\\n\\nLinkWell Nodes has its eyes set on eventually becoming an official node operator, but more importantly, being recognized as one of the most reliable, communicative, and supportive Node Operator teams present in the Chainlink (and broader Web3) ecosystem.\\n\\nWhile we recognize that Functions, recently released, is a superior method in many ways to the traditional direct request model, it is still in beta, and currently comes with a few limitations. You can check out our FAQ in order to understand our stance on Functions a bit more in-depth, but at this time, we think there is still a desire and need for traditional direct request support.\\n\\nThat\'s why we have devoted significant efforts in building out (what we believe) is the most comprehensive set of Chainlink node job offerings and documentation in the public sphere today. Our aim with this effort is to set a new standard for Chainlink community support, and to provide Web3 developers with their off-chain data needs as effortlessly and seamlessly as possible.\\n\\n## What We Have In Store\\nFortunately, we aren\'t putting all of our eggs in the direct request basket. We\'ve also recognized how challenging it can be for newer Chainlink node operators who don\'t have as much knowledge or experience as we do with deploying, operating and maintaining Chainlink nodes.\\n\\nAfter noticing the same questions arise over and over again in some of the more popular Chainlink Discord channels, we started building out an FAQ that we hope can act as the start of a knowledge base within our public documentation for both aspiring Chainlink node operators and consumers alike. As an aside, we have our own Discord channel as well if you\'d like to pop in and join our small but growing community, or if you are a developer in need of support!\\n\\n## Chainlink Deployment Model In AWS\\nAdditionally, as alluded to earlier, we may have plans in place to open source our Chainlink infrastructure stack for other members of the community to use. We aren\'t providing any guarantees or timelines on a public release at this time, but if there is enough demand and excitement for this release, we will be happy to move forward with it.\\nTo summarize what that release would look like, however, it would be similar to the AWS Quickstart in that after some basic AWS account setup, a new user would simply fill out an AWS Cloudformation template, hit the deploy button, and be up and running with Chainlink node infrastructure in the time it takes to sip your morning coffee.\\n\\nOne of the major design choices we made with our Chainlink infrastructure deployment model was to make the actual deployment as simple and flexible as possible, with multiple deployment architectures in AWS. Looking to simply spin up a testnet Chainlink node in a public subnet with a 3rd party RPC connection for fast and easy access? We support that.\\n\\nWhat about a highly-available and secure architecture with Chainlink nodes, external adapters and full nodes, and with auto-scaling and load balancing built in? We support that as well across all 5 mainnet chains and 6 testnet chains, all via Infrastructure as Code (IAC), with support for more chains to come in the future. What about monitoring and alerting? Out of the box, we include automatic Cloudwatch monitoring and alerting.\\n\\n## Splunk Integration\\nBut one of the features we are most excited to share is our deep integration with Splunk. While our Splunk integration deserves a separate blog or two on its own (stay posted for that), Splunk is one of the most, if not the most powerful enterprise grade monitoring, alerting and analytics tool on the market today. For the ninth time running, Splunk was named a \\"Leader\\" in Gartner\'s 2022 Magic Quadrant (MQ) for Security Information and Event Management (SIEM).\\n\\nTireless efforts were made to not only automatically deploy and configure Splunk within our Cloudformation templates at the flip of a switch, but to also automatically forward all Chainlink infrastructure logs directly into Splunk upon instance boot, if desired to do so.\\n\\nAs we were able to engineer this solution from the ground up, the infrastructure logs and metrics coming from Chainlink nodes, databases, full nodes and external adapters, to name some of the major ones, get fired off to Splunk where they are stored, parsed and configured to populate a robust suite of Chainlink monitoring dashboards and alerts that are wrapped up in our custom built Splunk application.\\n\\nWe didn\'t just stop at Chainlink infrastructure logs either, as we have monitoring in place at the AWS account level. Cloudtrail API calls, config changes, IAM actions, VPN activity and more are all forwarded and logged in Splunk. And yes, we have dashboards and alerts for this activity too.\\n\\nAs self-proclaimed trendsetters and innovators with the perfect skill sets and background to bring our Chainlink infrastructure and Splunk monitoring capability to life, we don\'t mention any of this in a boastful manner, but mostly because we are passionate and excited to share what we\'ve developed, and what we have to offer, with the greater Chainlink community.\\n\\nThat being said, it\'s important to note that due to the exhaustive and at times cumbersome nature of configuring and maintaining Splunk, if there were enough interest and demand, we are considering offering Splunk, along with several other very useful of powerful features that we haven\'t mentioned yet, as a set of premium but optional capabilities under a subscription based model.\\n\\nIn a perfect world we\'d open source everything, but for the time being we aren\'t quite there yet, so even a small subscription fee would help our ambitious development efforts towards supporting the Chainlink community. But we can cross that bridge when we get there.\\n\\nLastly, we recognize that there will likely be an endless need for Chainlink educators and content creators. Whether that be educational content geared towards Chainlink node operations, or content geared towards supporting Web3 developers interested in using Chainlink services, we are here to help.\\n\\nWith what feels like a bull market just around the corner coupled with Chainlink\'s seemingly unstoppable momentum, there couldn\'t be a more exciting time to be a part of the Chainlink community, and one can\'t help but wonder what the next 5 years will have in store!\\n\\nIf you are interested in staying tuned, feel free to join our Discord, or follow us on Twitter @LinkWell_Nodes.\\n\\nThanks for reading!"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","source":"@site/blog/2023-09-01-welcome/index.md","title":"Welcome","description":"Welcome to our blog!","date":"2023-09-01T00:00:00.000Z","formattedDate":"September 1, 2023","tags":[{"label":"Chainlink","permalink":"/blog/tags/chainlink"}],"readingTime":2.115,"hasTruncateMarker":true,"authors":[{"name":"Ken Reiners","title":"Co-Founder LinkWell Nodes","url":"https://github.com/LinkWellNodes","key":"Ken"},{"name":"Derek Ricciuto","title":"Co-Founder LinkWell Nodes","url":"https://github.com/LinkWellNodes","key":"Derek"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["Ken","Derek"],"tags":["Chainlink"]},"prevItem":{"title":"Introduction","permalink":"/blog/introduction"}},"content":"Welcome to our blog!\\n\\nAt our core, we are committed to supporting the Chainlink community in any way we can. Through our expertise as Chainlink node operators and Web3 developers, we strive to provide useful and actionable content to help users and developers navigate the Chainlink ecosystem. We are dedicated to sharing our knowledge and insights to empower individuals and teams in their journey with Chainlink.\\n\\n\x3c!--truncate--\x3e\\n\\nIn this blog, we will cover a wide range of topics that we believe both aspiring Chainlink node operators and Chainlink users (Web3-based developers, projects, or teams) will greatly benefit from. For Chainlink node operators, we will share insights gained from deploying Chainlink nodes over the past few years, as well as our expertise in various industries including cloud, monitoring, security, development, and more.\\n\\nThe topics we will discuss include deploying Chainlink nodes and the associated infrastructure such as full nodes, external adapters, and databases. We will also address lesser-known subjects such as Chainlink node profitability, who should run a node and why, node maintenance, security, monitoring, and much more.\\n\\nWith extensive experience supporting Web3 requests for data via Chainlink, we are also committed to peeling back the curtain when it comes to interacting with Chainlink node operators such as ourselves, and also by providing clear and concise documentation for our direct request Any API services. We have already begun this effort with our [Direct Request Guide](https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing) and [Any API Examples](https://docs.linkwellnodes.io/services/direct-request-jobs/Any-API-Guide), and we will continue to cover all of Chainlink\'s services in future blog posts, including CCIP, VRF, Functions, Automation, Data Feeds, and of course, Any API.\\n\\nAdditionally, we have encountered numerous recurring questions. These questions include: \\"Should I run my own node or utilize existing node operator services?\\", \\"Is running a Chainlink node worth it or profitable?\\", \\"How can I find a node operator for a custom data feed I require?\\", and more. We understand that finding answers to these questions can be challenging, as many of them may not be addressed in Chainlink\'s comprehensive community resources and online documentation. Our [FAQ](https://docs.linkwellnodes.io/knowledgebase/FAQ), and this blog, aim to provide answers to these questions.\\n\\nWe are thrilled to share our knowledge and expertise with anyone who interacts with Chainlink nodes in any capacity. We hope that you, as the reader, will find value in this blog. If you do, we kindly ask that you consider sharing it on social media! Additionally, feel free to join our Discord community, where you can learn more about specific topics or simply say hello.\\n\\nThank you for reading, and happy exploring!"}]}')}}]);