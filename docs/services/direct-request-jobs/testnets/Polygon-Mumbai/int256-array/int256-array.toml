type = "directrequest"
schemaVersion = 1
name = "LW_MMT_EA_int256-array"
externalJobID = "356a0ace-d8f7-425a-bd2e-c17df9014359"
forwardingAllowed = false
maxTaskDuration = "0s"
contractAddress = "0x12A3d7759F745f4cb8EE8a647038c040cB8862A5"
minContractPaymentLinkJuels = "0"
observationSource = """

    decode_log  [
                type="ethabidecodelog"
                abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                data="$(jobRun.logData)"
                topics="$(jobRun.logTopics)"
                ]

    decode_cbor [
                type="cborparse"
                data="$(decode_log.data)"
                ]

    send_to_bridge [
                type="bridge" 
                name="common-http-forwarder" 
                requestData="{\\"contact-id\\":$(decode_cbor.contact),\\"url\\":$(decode_cbor.url),\\"method\\":$(decode_cbor.method),\\"headers\\":$(decode_cbor.headers),\\"body\\":$(decode_cbor.body),\\"jsonpath\\":$(decode_cbor.path),\\"multiplier\\":$(decode_cbor.multiplier),\\"jobname\\":$(jobSpec.name),\\"txnhash\\":$(jobRun.logTxHash),\\"externaljobid\\":$(jobSpec.externalJobID),\\"oracleaddress\\":$(jobRun.logAddress)}" 
                headers="[\\"secret-val-01\\", \\"\\", \\"secret-val-02\\", \\"\\", \\"secret-val-03\\", \\"\\", \\"secret-val-04\\", \\"\\", \\"secret-val-05\\", \\"\\"]"
                ]

    parse       [
                type="jsonparse"
                path=""
                data="$(send_to_bridge)"
                ]

    encode_data [
                type="ethabiencode" 
                abi="(bytes32 requestId, int256[] value)" 
                data="{\\"requestId\\": $(decode_log.requestId), \\"value\\": $(parse)}"
                ]

    encode_tx   [
                type="ethabiencode"
                abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"
                ]

    submit_tx   [
                type="ethtx"
                to="0x12A3d7759F745f4cb8EE8a647038c040cB8862A5"
                data="$(encode_tx)"
                gasLimit="500000"
                ]

    decode_log -> decode_cbor -> send_to_bridge -> parse -> encode_data -> encode_tx -> submit_tx
"""
# NOTES:
# Necessary to keep the parse task for arrays, as it normalizes the response from the EA and allows for proper serialization by ethabiencode