type = "directrequest"
schemaVersion = 1
name = "LW_CBM_DR_Get_String_x2"
externalJobID = "be46cb80-70c1-4cb7-ad05-8b29f127ec6b"
forwardingAllowed = false
maxTaskDuration = "0s"
contractAddress = "<oracle address>"
minContractPaymentLinkJuels = "150000000000000000"
observationSource = """

    decode_log  [
                type="ethabidecodelog"
                abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                data="$(jobRun.logData)"
                topics="$(jobRun.logTopics)"
                ]
    decode_cbor [
                type="cborparse"
                data="$(decode_log.data)"
                ]
    decode_log -> decode_cbor
    
    decode_cbor -> value1
    decode_cbor -> value2
    
    value1        [type="http" method=GET url="$(decode_cbor.url1)" allowunrestrictednetworkaccess="false"]
    value1_parse  [type="jsonparse" path="$(decode_cbor.path1)" data="$(value1)"]
    value1 -> value1_parse
    
    value2        [type="http" method=GET url="$(decode_cbor.url2)" allowunrestrictednetworkaccess="false"]
    value2_parse  [type="jsonparse" path="$(decode_cbor.path2)" data="$(value2)"]
    value2 -> value2_parse

\tvalue1_parse -> encode_data
\tvalue2_parse -> encode_data
    
    encode_data [
                type="ethabiencode" abi="(bytes32 requestId, string value1, string value2)" data="{ \\"requestId\\": $(decode_log.requestId), \\"value1\\": $(value1_parse), \\"value2\\": $(value2_parse) }"]
    encode_tx    [type="ethabiencode"
                  abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                  data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"
                  ]
    submit_tx   [
                type="ethtx"
                to="<oracle address>"
                data="$(encode_tx)"
                gasLimit="500000"
                ]

    encode_data -> encode_tx -> submit_tx
"""
