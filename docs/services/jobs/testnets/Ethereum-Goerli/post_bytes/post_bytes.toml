type = "directrequest"
schemaVersion = 1
name = "LW_EGT_DR_Post_Bytes"
externalJobID = "b3390c03-bfc2-4b42-a0b0-ab8051471bbb"
forwardingAllowed = false
maxTaskDuration = "0s"
contractAddress = "0xB9C47B9609174716CE536324d4FbEad9292c1d3a"
minContractPaymentLinkJuels = "0"
observationSource = """
    decode_log   [type="ethabidecodelog"
                  abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                  data="$(jobRun.logData)"
                  topics="$(jobRun.logTopics)"]

    decode_cbor  [type="cborparse" data="$(decode_log.data)"]
    post        [
	    			type="http" 
	                method=POST
	                url="$(decode_cbor.post)" 
	                # Permits the task to access a URL at localhost, which could present a security risk. Note that Bridge tasks allow this by default.
	                allowunrestrictednetworkaccess="false" 
	                # (optional) REQUEST HEADERS | these headers must be hardcoded below, and cannot be added dynamically (ie, decode_cbor.var), as var injection is not supported for this field
	                # headers="[
	                #	\\"HeaderNm1\\", \\"HeaderVal1\\", 
	                #	\\"HeaderNm2\\", \\"HeaderVal2\\",
	                #	\\"HeaderNm3\\", \\"HeaderVal3\\"
	            	#]"  
	            	# (OPTIONAL) REQUEST BODY | if included, the value must not be a blank string (''), and must be at a minimum sent over from the consumer contract as '{}'.
	                requestData="$(decode_cbor.requestData)"
                ]
    parse        [type="jsonparse" path="$(decode_cbor.path)" data="$(post)"]
    encode_large [type="ethabiencode"
                abi="(bytes32 requestId, bytes _data)"
                data="{\\"requestId\\": $(decode_log.requestId), \\"_data\\": $(parse)}"
                ]
    encode_tx  [type="ethabiencode"
                abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\":   $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_large)}"
                ]

    submit_tx    [type="ethtx" to="0xB9C47B9609174716CE536324d4FbEad9292c1d3a" data="$(encode_tx)"]

    decode_log -> decode_cbor -> post -> parse -> encode_large -> encode_tx -> submit_tx
"""