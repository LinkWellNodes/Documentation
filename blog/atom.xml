<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://docs.linkwellnodes.io/blog</id>
    <title>LinkWell Nodes Blog</title>
    <updated>2024-02-01T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://docs.linkwellnodes.io/blog"/>
    <subtitle>LinkWell Nodes Blog</subtitle>
    <icon>https://docs.linkwellnodes.io/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[How To Request a Custom Any API Chainlink Data Feed: A 7 Step Guide For Web3 Developers]]></title>
        <id>https://docs.linkwellnodes.io/blog/2024/02/01/Custom-Data-Feeds</id>
        <link href="https://docs.linkwellnodes.io/blog/2024/02/01/Custom-Data-Feeds"/>
        <updated>2024-02-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this article, we explore the 7 steps that Web3 developers can follow for integrating real world data from Chainlink oracles into their smart contracts.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Chainlink Any API Data Feed" src="/assets/images/Header-bc9891a313def6faadc04fe1c09ce64e.webp" title="Chainlink Any API Data Feed" width="720" height="235" class="img_ev3q"></p><p>Smart contracts that integrate Chainlink data feeds are far more capable than those that don't.</p><p>Since its launch in 2017, Chainlink - the industry standard Web3 services platform - has curated an extensive array of <a href="https://docs.chain.link/data-feeds" target="_blank" rel="noopener noreferrer">official data feeds</a>, among a myriad of other powerful services, providing developers with a seamless integration of real-world information into their applications. However, the dynamic nature of Web3 applications often demands access to data beyond what official Chainlink feeds offer. This is where custom Chainlink <a href="https://docs.chain.link/any-api/introduction" target="_blank" rel="noopener noreferrer">Any API</a> data feeds step in, catering to the unique requirements of diverse smart contract applications. The process for requesting a custom Any API Chainlink data feed, however, hasn't always been clearly defined.</p><p>That's why we've gone through great lengths to make the process as seamless as possible for Web3 developers looking to integrate Chainlink's Any API capabilities.</p><blockquote><p><strong> <em>Why Chainlink?</em> </strong></p><p><em>Blockchain consensus mechanisms limit smart contracts from directly interacting with the internet, creating the blockchain <a href="https://chain.link/education-hub/oracle-problem" target="_blank" rel="noopener noreferrer">oracle problem</a>. This hurdle represents one of the greatest limitations to representing everyday contracts on the blockchain.</em></p><p><em>Hybrid smart contracts solve this by using oracles as middleware - enabling external data publishing &amp; retrieval, and scalable off-chain computations. Oracles act as a two-way bridge, enhancing connectivity while providing security against single points of failure.</em></p><p><em>Chainlink - the industry standard Web3 services platform - is the most widely used decentralized oracle network, securing significant value across a diverse assortment of blockchains and use cases. It operates as an ecosystem with independent decentralized oracle networks, guaranteeing robust and versatile oracle services.</em></p></blockquote><p><strong>Prerequisites For Making An Any API Request</strong></p><p>There are three Web3 technologies that you'll need to have in place before making your first request:</p><ol><li><p><strong>A Web3 Wallet:</strong> Web3 wallets are required for not only storing your tokens, but also for deploying your smart contracts and signing messages. Examples include Ledger, Trezor, MetaMask, Coinbase Wallet, or Trust Wallet.</p></li><li><p><strong>An IDE:</strong> EVM-compatible Integrated development environments (IDE) like <a href="https://remix.ethereum.org/" target="_blank" rel="noopener noreferrer">Remix</a> are required for deploying and testing your smart contract. Advanced users may prefer Hardhat or Foundry, particularly for more complex deployments.</p></li><li><p><strong>Solidity:</strong> Solidity is Ethereum's primary programming language for developing smart contracts. It will be helpful to have at least a basic understanding of Solidity before getting started.</p></li></ol><p>An additional crucial element that you'll need is a well-defined use case. What project are you working on? What specific on-chain data and APIs are integral to your objectives? And perhaps most importantly, what is your plan for utilizing the data once it's retrieved? The possibilities are endless, and the only true constraint here is the extent of your imagination.</p><p>If you don't already have a well-defined use case, here are a few custom data feed ideas:</p><ul><li><p><strong>Weather Data:</strong> Retrieve daily and hourly weather forecasts, current conditions, and daily index data from data providers such as OpenWeather or AccuWeather.</p></li><li><p><strong>Sports Data:</strong> Retrieve live scores, player statistics, team information, and historical data from virtually any sports team from data providers include TheRundown or SportsDataIO.</p></li><li><p><strong>DeFi Data:</strong> Real-time and historical cryptocurrency price data, market analysis, and other vital metrics across a multitude of exchanges from data providers such as CryptoCompare.</p></li><li><p><strong>Real-World Asset Data:</strong> Physical and traditional assets such as cash, commodities, equities, bonds, credit, artwork, and intellectual property from professional data providers (e.g. Kelly Blue Book for cars), independent/expert appraisers, exchanges/OTC markets, or any customized aggregation of data sources.</p></li><li><p><strong>IoT Data:</strong> Supply chain tracking, accounting transparency, health wearables, consumption and pollution, parametric insurance that tracks rainfall, GPS sensors, and more.</p></li></ul><p><strong>Chainlink oracles can return data from anywhere on the internet.</strong> For more ideas, we recommend looking into Chainlink's blog on the <a href="https://blog.chain.link/smart-contract-use-cases/" target="_blank" rel="noopener noreferrer">77 different use cases enabled by Chainlink</a>. Additional custom data feed examples that walk you through building a custom data feed can be found within our <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Any-API-Guide" target="_blank" rel="noopener noreferrer">website's documentation</a>.</p><blockquote><p><em>If you are interested in the actual mechanics of how requests to Chainlink nodes operate under the hood, feel free to check out our <a href="https://docs.linkwellnodes.io/knowledgebase/Direct-Request-Guide" target="_blank" rel="noopener noreferrer">direct request guide</a>.</em></p></blockquote><p>Without further ado, here are the 7 steps for requesting a custom Chainlink data feed.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-1-finding-a-suitable-chainlink-node-operator"><strong>Step 1:</strong> Finding a Suitable Chainlink Node Operator<a href="#step-1-finding-a-suitable-chainlink-node-operator" class="hash-link" aria-label="Direct link to step-1-finding-a-suitable-chainlink-node-operator" title="Direct link to step-1-finding-a-suitable-chainlink-node-operator">â€‹</a></h3><p>This is arguably the most crucial step of all. Similar to the way a highly-skilled CPA can enhance tax strategization, potentially leading to substantial annual savings, the importance of proficient Chainlink node operators cannot be overstated.</p><p>Working with a knowledgeable and competent Chainlink node operator can greatly streamline the process of requesting and building a custom data feed, allowing you or your team to allocate resources more efficiently to your Web3 application. Furthermore, these node operators should possess the expertise to assist in crafting your smart contract code, conducting code reviews, and suggesting gas optimization strategies within your smart contract. This not only saves time, but can also preserve valuable funds with each data request to the Chainlink oracle.</p><p>Here's what you should look for when it comes to a Chainlink node operator:</p><ol><li><p>Trustworthy and reliable.</p></li><li><p>A proven track record.</p></li><li><p>Strong communication skills.</p></li><li><p>Transparent and clearly-defined pricing.</p></li><li><p>Reliable, secure, and redundant infrastructure.</p></li><li><p>Knowledgeable in Solidity.</p></li><li><p>A well-defined process for requesting custom data feeds.</p></li><li><p>Continuous monitoring of each data feed request pipeline.</p></li><li><p>A clear service-level agreement (SLA) for their data feed performance.</p></li></ol><blockquote><p><em>At LinkWell Nodes, we do our best to align with these characteristics and qualities.</em>
<em>Our services include <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">custom data feed capabilities and self-service oracle solutions</a> across 14 mainnet and 13 testnet blockchains. Beyond that, our suite of <a href="https://docs.linkwellnodes.io/services/Development-Services" target="_blank" rel="noopener noreferrer">development services</a> is designed to cater to the diverse needs of your Web3 project. We also offer robust documentation on our website in order to help facilitate this process.</em></p></blockquote><p><strong>Where Can I Find a Chainlink Oracle?</strong></p><p>As of the time of writing, there lacks a centralized marketplace for Chainlink oracles. Historically, a Chainlink node marketplace existed at market.link. However, market.link has been deprecated, and the primary avenue for finding an oracle is by sending a chat within the <strong>#operator-requests</strong> channel of the <a href="https://discord.com/invite/chainlink" target="_blank" rel="noopener noreferrer">Chainlink Official Discord server</a>. Additionally, a simple Google search can yield information about the various Chainlink node operators and the services they publicly offer.</p><p>Ultimately, the responsibility lies with you to diligently vet and select a Chainlink node operator who aligns with the characteristics specified above.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-2-communicating-your-data-requests"><strong>Step 2: Communicating Your Data Requests</strong><a href="#step-2-communicating-your-data-requests" class="hash-link" aria-label="Direct link to step-2-communicating-your-data-requests" title="Direct link to step-2-communicating-your-data-requests">â€‹</a></h3><p>After selecting a Chainlink node operator, you'll want to succinctly convey to them the requirements of your Web3 project. It is beneficial to provide the following information to facilitate effective collaboration:</p><ol><li><p><strong>Blockchain Network:</strong> The blockchain network you plan on deploying your application on.</p></li><li><p><strong>Data Type:</strong> The type of data you are requesting (i.e., uint256, string[], bool, etc.).</p></li><li><p><strong>Frequency:</strong> The expected frequency of the request to the oracle (i.e. once a day, once a minute, etc.).</p></li><li><p><strong>External Adapter:</strong> External adapters exist to perform a variety of custom logic against diverse range of off-chain resources. These resources encompass premium data providers, authenticated web APIs, IoT sensors, bank payments, enterprise back-ends, other blockchain networks, and various other sources.</p></li><li><p><strong>Urgency:</strong> How soon do you need your new data feed up &amp; running?</p></li><li><p><strong>Decentralization requirements:</strong> Would you find it acceptable to have one Chainlink node operations team managing your data feed using multiple redundant Chainlink nodes, or do you specifically require the involvement of multiple node operator teams?</p></li><li><p><strong>Other Chainlink Services:</strong> Do you require additional Chainlink services such as <a href="https://docs.chain.link/chainlink-automation" target="_blank" rel="noopener noreferrer">Automation</a> or <a href="https://docs.chain.link/vrf" target="_blank" rel="noopener noreferrer">VRF</a> to be implemented within your smart contract?</p></li><li><p><strong>API endpoint:</strong> What HTTP URL do you need to request data from? Does it require an API key, a request body, or any headers? Sending a sample CURL command to the node operator should be sufficient here. Example below:</p></li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    curl https://myApi.com/BTC/USD --request POST --header "X-Auth-Key: my-api-key-123" --data '{"interval": 1, "count": 10}'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p><em>At LinkWell Nodes, to simplify the process of requesting a new data feed, we ask that you fill out our specialized <a href="https://linkwellnodes.io/Getting-Started.html" target="_blank" rel="noopener noreferrer">data feed request form</a>. Once we receive your submission, we'll make every effort to respond promptly and provide your custom data feed ASAP (typically within the day).</em></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-3-building-and-deploying-your-smart-contract">Step 3: Building and Deploying Your Smart Contract<a href="#step-3-building-and-deploying-your-smart-contract" class="hash-link" aria-label="Direct link to Step 3: Building and Deploying Your Smart Contract" title="Direct link to Step 3: Building and Deploying Your Smart Contract">â€‹</a></h3><p>Although you may have already commenced the development of your smart contract before reaching out to a Chainlink node operator, you may need to modify it to suit your chosen oracle's requirements.</p><blockquote><p><em>At LinkWell Nodes, we provide <a href="https://github.com/LinkWellNodes/Documentation/blob/main/docs/services/direct-request-jobs/mainnets/Arbitrum-One/uint256/uint256.sol#L48-L56" target="_blank" rel="noopener noreferrer">comprehensive code samples</a> to help you get started on your contract development. These examples serve as a valuable resource in kick-starting your smart contract development, or incorporating our data feeds into your existing smart contract.</em></p></blockquote><p><strong>Key methods within your smart contract include:</strong></p><ol><li><strong>The Constructor:</strong> Here you'll typically specify the <a href="https://docs.chain.link/resources/link-token-contracts" target="_blank" rel="noopener noreferrer">Chainlink (LINK) token contract address</a> for your respective chain, the oracle address, the job ID, and the per-request payment amount. Oracle addresses, job IDs, and payment amounts are provided by (or negotiated with) your chosen node operator.</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    constructor() ConfirmedOwner(msg.sender) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setChainlinkToken(0x326C977E6efc84E512bB9C30f76E30c160eD06FB);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setOracleAddress(0x12A3d7759F745f4cb8EE8a647038c040cB8862A5);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setJobId("a8356f48569c434eaa4ac5fcb4db5cc0");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        setFeeInHundredthsOfLink(0);     // 0 LINK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ol start="2"><li><strong>The Request Function:</strong> The request function (also called the transferAndCall() or sendOperatorRequest() function) defines your request characteristics, and sends the request (and payment) to the Chainlink oracle.</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    function request() public {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Chainlink.Request memory req = buildOperatorRequest(jobId, this.fulfill.selector);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // DEFINE THE REQUEST PARAMETERS (example)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        req.add('method', 'GET');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        req.add('url', 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH&amp;tsyms=USD,EUR');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        req.add('headers', '["content-type", "application/json", "set-cookie", "sid=14A52"]');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        req.add('body', '');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        req.add('contact', '');     // PLEASE ENTER YOUR CONTACT INFO. this allows us to notify you in the event of any emergencies related to your request (ie, bugs, downtime, etc.). example values: 'derek_linkwellnodes.io' (Discord handle) OR 'derek@linkwellnodes.io' OR '+1-617-545-4721'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // The following curl command simulates the above request parameters: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // curl 'https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH&amp;tsyms=USD,EUR' --request 'GET' --header 'content-type: application/json' --header 'set-cookie: sid=14A52'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // PROCESS THE RESULT (example)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        req.add('path', 'ETH,USD');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        req.addInt('multiplier', 10 ** 18);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // Send the request to the Chainlink oracle        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sendOperatorRequest(req, fee);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p><em>LinkWell Nodes implements a unique and innovative approach that allows for greater control over building your request, but requires a few additional parameters be set (as in the above example).
<strong>Please refer to our <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">documentation</a> when building your request - especially in regards to these required request parameters.</strong> </em></p></blockquote><ol start="3"><li><strong>The Fulfill Function:</strong> Once the data has been retrieved, parsed, and converted into a blockchain-compatible format, our oracle node executes a blockchain transaction against the oracle contract, which in turn writes the data back to your consumer contract via execution of your fulfill() function.</li></ol><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    uint256 public response;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Receive the result from the Chainlink oracle    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    event RequestFulfilled(bytes32 indexed requestId);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    function fulfill(bytes32 requestId, uint256 data) public recordChainlinkFulfillment(requestId) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     // Process the oracle response</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // emit RequestFulfilled(requestId);    // (optional) emits this event in the on-chain transaction logs, allowing Web3 applications to listen for this transaction</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        response = data;     // example value: 1875870000000000000000 (1875.87 before "multiplier" is applied)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>Now, deploy it!</strong></p><p>Now that your smart contract's been drafted up, it's time to deploy it. We suggest deploying your smart contract onto a testnet initially, so that you can validate your request logic in a low-risk environment before deploying onto a mainnet. If you need guidance during this process, you can refer to a brief <a href="https://www.youtube.com/watch?v=vH8T3In6ZkE" target="_blank" rel="noopener noreferrer">YouTube tutorial on Remix</a> by EatTheBlocks. We are happy to assist as well!</p><blockquote><p><em>LinkWell Nodes offers free Chainlink oracle requests on all blockchain testnets, as part of our dedication to supporting the Chainlink community and assisting new Web3 developers.
We encourage Web3 developers to <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/testnets" target="_blank" rel="noopener noreferrer">take advantage</a> of this opportunity to submit their requests without any cost.</em></p></blockquote><center><iframe width="560" height="315" src="https://www.youtube.com/embed/vH8T3In6ZkE" frameborder="0"></iframe></center><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-4-testing-the-chainlink-oracle-request-in-your-smart-contract">Step 4: Testing the Chainlink Oracle Request In Your Smart Contract<a href="#step-4-testing-the-chainlink-oracle-request-in-your-smart-contract" class="hash-link" aria-label="Direct link to Step 4: Testing the Chainlink Oracle Request In Your Smart Contract" title="Direct link to Step 4: Testing the Chainlink Oracle Request In Your Smart Contract">â€‹</a></h3><p>Now comes the fun part - executing the request logic against the oracle specified in your constructor method.</p><p>Your first step is to deploy your smart contract code using the <a href="https://remix.ethereum.org/" target="_blank" rel="noopener noreferrer">Remix IDE</a>. After deploying the contract, the next step is to trigger the transferAndCall() function (sometimes called the request() or sendOperatorRequest() function, highlighted in purple below) within your consumer contract.</p><p><img loading="lazy" alt="Remix Figure 1" src="/assets/images/Remix_Diagram_1-d47668fbf53b510a9c6ea8d392e38701.webp" width="1788" height="856" class="img_ev3q"></p><p>Once your data has successfully been retrieved and parsed, our oracle node executes a blockchain transaction against the oracle contract, which in turn writes the data back to your consumer contract via its fulfill() function. Receiving your response may take up to 60 seconds - depending on your chosen blockchain's block time.</p><p>Clicking the response button highlighted in purple below should return the data from your request.</p><blockquote><p><em>If your contract hasn't received a response after waiting 2 minutes, you may have an issue with your request, response, or API endpoint. Please check out our <a href="https://docs.linkwellnodes.io/knowledgebase/faq/Chainlink-Users#im-not-getting-a-response-back-to-my-consumer-contract" target="_blank" rel="noopener noreferrer">FAQ</a> on this subject for more troubleshooting information. We also welcome Web3 developers to join our <a href="https://discord.com/invite/Xs6SjqVPUA" target="_blank" rel="noopener noreferrer">Discord channel</a>, where we are happy to work through any problems that may arise.</em></p></blockquote><p><img loading="lazy" alt="Remix Diagram 2" src="/assets/images/Remix_Diagram_2-02cce566df7ef13d31f84e093c19b056.webp" width="1788" height="856" class="img_ev3q"></p><p>Once the data has been returned, you are free to utilize that data within your smart contract for whatever purpose you need.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-5-optimizing-your-smart-contracts-request-and-fulfill-functions-optional">Step 5: Optimizing Your Smart Contract's Request and Fulfill Functions (Optional)<a href="#step-5-optimizing-your-smart-contracts-request-and-fulfill-functions-optional" class="hash-link" aria-label="Direct link to Step 5: Optimizing Your Smart Contract's Request and Fulfill Functions (Optional)" title="Direct link to Step 5: Optimizing Your Smart Contract's Request and Fulfill Functions (Optional)">â€‹</a></h3><p>This step is marked as optional, as it is geared towards advanced users and/or use cases.</p><p>Reducing the gas costs incurred by the Chainlink node operator in writing your result to your smart contract generally lowers the LINK they'll need to charge you per request. Therefore, it is typically advisable to optimize your fulfill() function's gas usage, in order to increase the overall cost-effectiveness of your Chainlink requests.</p><blockquote><p><strong>Side note</strong>: <em>If your transaction is failing due to an 'out of gas' error, you have several options: A) Provide a smaller response, B) Divide your request into multiple oracle transactions, or C) Reach out to the relevant oracle team to request an increased gas allowance for your specific use case (which may lead to higher job pricing).</em></p></blockquote><p>As previously mentioned, optimizing your smart contract's request and fulfill functions is a service we offer as part of our <a href="https://docs.linkwellnodes.io/services/Development-Services" target="_blank" rel="noopener noreferrer">development services</a>.</p><p>One other key point - gas prices can be unpredictable, especially when deploying your application on the Ethereum network. In the event of a significant surge in gas prices, the costs incurred by the node operator will spike as well. This forces many node operators to price their data feeds at higher rate to balance out the losses incurred by these market spikes. Consulting with your node operator beforehand on their pricing model may lead to informative conversations here. Whenever possible, we strongly recommend deploying your Web3 application on a layer 2 network such as Arbitrum or Optimism.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-6-deploying-your-smart-contract-on-mainnet-and-validating-the-request-and-fulfill-functions">Step 6: Deploying Your Smart Contract On Mainnet and Validating the Request and Fulfill Functions<a href="#step-6-deploying-your-smart-contract-on-mainnet-and-validating-the-request-and-fulfill-functions" class="hash-link" aria-label="Direct link to Step 6: Deploying Your Smart Contract On Mainnet and Validating the Request and Fulfill Functions" title="Direct link to Step 6: Deploying Your Smart Contract On Mainnet and Validating the Request and Fulfill Functions">â€‹</a></h3><p>In this step, we'll discuss the deployment of your smart contract to a mainnet vs a testnet blockchain network.</p><p>One notable difference when transitioning from a testnet oracle request to a mainnet oracle request is that your mainnet requests that you send require a nominal fee in the form of the LINK token (usually around 0.1 LINK, depending on the blockchain network and data type). For this reason, it is necessary to fund your smart contract with LINK in order to accommodate the anticipated request volume for your Web3 application.</p><p>After deploying and funding your mainnet contract, we suggest executing your request function at least once to ensure your functionality is working as expected.</p><blockquote><p><em>At LinkWell Nodes, we strive for transparency and efficiency around our pricing model. For a more comprehensive understanding of the factors that influence our data feed pricing, you can explore our pricing article <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Pricing" target="_blank" rel="noopener noreferrer">here</a>.
<strong>Our commitment is to offer the most competitive pricing in the market.</strong> Deploying your contract initially onto a testnet and making a few requests to our oracles can help us significantly in gauging the lowest-possible pricing for your custom data feed.</em></p></blockquote><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="step-7-go-live-with-your-web3-application"><strong>Step 7: Go Live With Your Web3 Application</strong><a href="#step-7-go-live-with-your-web3-application" class="hash-link" aria-label="Direct link to step-7-go-live-with-your-web3-application" title="Direct link to step-7-go-live-with-your-web3-application">â€‹</a></h3><p>Congratulations on reaching this point!</p><p>Now that your application's data pipeline is fully deployed, you'll need to find some users to interact with your newly-minted and Chainlink-secured Web3 application.</p><p>Here are some final recommendations for your Chainlink integration:</p><ol><li><p><strong>Implement Other Chainlink Services:</strong> Your smart contract development journey doesn't need to end with custom data feeds. Chainlink offers a diverse array of supplementary services that can further elevate the potential of your projects. Chainlink Automation, for example, can be an enhancement for automating the request() function to your custom data feed.</p></li><li><p><strong>Communication:</strong> Practice keeping an open line of communication with your chosen Chainlink node operator to ensure a rapid response in the event of any issues, downtime, or changes you might like them to make.</p></li><li><p><strong>Monitoring:</strong> Ensure that your selected Chainlink node operator consistently monitors the request pipeline of your custom data feed. To this end, ask them what their alerting policy is for their mainnet data feeds (if any). This vigilance helps to keep your Web3 application safe in the event of any integration issues, such as your API endpoint failing to respond to your oracle's requests.</p><blockquote><p><em>At LinkWell Nodes, it is our mission to provide transparency, security, and ownership over all of your data delivery needs. To that end, we provide a clear <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Service-Level-Agreement" target="_blank" rel="noopener noreferrer">Service-Level Agreement (SLA)</a> for all of our mainnet data feeds.</em></p></blockquote></li></ol><p><strong>Conclusion</strong></p><p>With the proper knowledge and understanding in place, navigating the process of requesting, building, and integrating a Chainlink data feed should not only be seamless - it should be fun and exciting as well! We sincerely hope that this guide serves as a solid foundation for Web3 teams looking to integrate Chainlink's powerful Web3 services and capabilities into their smart contracts.</p><p><strong>Looking for a way to get involved?</strong> Join a team and participate in a hackathon hosted by Chainlink. Hackathons are a great opportunity to enhance your Web3 knowledge, network among like-minded Web3 professionals, meet industry leaders, and even win some cool prizes!</p><hr><blockquote><p><em>LinkWell Nodes is a U.S.-based Chainlink oracle.</em></p><p><em>We provide custom data feed capabilities and self-service oracle solutions across all major mainnet and testnet blockchains supported by Chainlink.</em></p><p><em>Looking for a custom data feed? Head on over to our <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">documentation</a></em>, <em>or hop into our <a href="https://discord.com/invite/Xs6SjqVPUA" target="_blank" rel="noopener noreferrer">Discord server</a> and ask for help!</em></p></blockquote><p><img loading="lazy" alt="LinkWell Nodes - U.S.-based Chainlink node operator" src="/assets/images/lw-banner_1080x606-c6d84e1ae6e43af8c26ee04d238969be.webp" title="LinkWell Nodes - U.S.-based Chainlink node operator" width="1080" height="606" class="img_ev3q"></p>]]></content>
        <author>
            <name>Ken Reiners</name>
            <uri>https://www.linkedin.com/in/ken-reiners-755806167/</uri>
        </author>
        <category label="chainlink" term="chainlink"/>
        <category label="oracle" term="oracle"/>
        <category label="smart contract" term="smart contract"/>
        <category label="web3" term="web3"/>
        <category label="blockchain" term="blockchain"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chainlink Any API - Direct Request vs. Functions]]></title>
        <id>https://docs.linkwellnodes.io/blog/2024/01/17/Direct-Requests-Vs-Functions</id>
        <link href="https://docs.linkwellnodes.io/blog/2024/01/17/Direct-Requests-Vs-Functions"/>
        <updated>2024-01-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Exploring the pros and cons of Chainlink's Direct Requests vs. Functions - A guide for Web3 developers for off-chain data retrieval and computation.]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Chainlink Any API - Direct Request vs. Functions" src="/assets/images/Header-5dd6c65d31fe89a1a655ace10c4d70b2.webp" title="Chainlink Any API - Direct Request vs. Functions" width="1400" height="788" class="img_ev3q"></p><p><strong>Direct Requests vs. Functions: How to decide?</strong></p><p>Navigating the ever-evolving landscape of Chainlink and its integrations within the Web3 ecosystem can at times be daunting.</p><p>Since its inception, Chainlink has evolved at a rapid rate. One of the original services provided by Chainlink's decentralized oracle network was <a href="https://docs.chain.link/any-api/introduction" target="_blank" rel="noopener noreferrer">Direct Request jobs</a> (also known as "Any API") â€” Chainlink's first iteration of a solution to help bridge the gap between on-chain and off-chain data. While it worked effectively, there were inherent shortcomings that eventually prompted the release of <a href="https://docs.chain.link/chainlink-functions" target="_blank" rel="noopener noreferrer">Chainlink Functions</a>, marking an improvement in security, reliability, and self-service capabilities.</p><p>Yet, after the release of Functions, a lingering question remains:</p><p><strong>Are Direct Requests still viable?</strong></p><p>We would argue that they are. </p><p>Make no mistake: Chainlink Functions is a monumental enhancement for off-chain computation and data retrieval, and we believe that Web3 teams should consider using Functions if and when applicable.</p><blockquote><p><em>Disclaimer: All views below are strictly our own, and not the views or opinions of Chainlink Labs. As a community-based Chainlink node operations team with extensive <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">Chainlink Direct Request service offerings</a>, we acknowledge our potential bias in writing on this topic. In that vein, we promise to be as objective as possible in assessing the relevance of both approaches.</em></p></blockquote><p>While Chainlink Functions reigns supreme in many ways to the traditional Direct Request model, there are pros and cons to each approach. Having a nuanced understanding acknowledges the fact that Direct Requests can still be a relevant option for off-chain data data retrieval and computation, depending on your use case.</p><p>Our objective here is to illuminate this choice for Web3 developers, who might be faced with the challenge of selecting one over the other.</p><p><strong>Let's begin by examining Chainlink Direct Requests (Any API):</strong></p><iframe width="100%" height="315" src="https://www.youtube.com/embed/ay4rXZhAefs?si=Rat05_PI4LfNU1dJ" title="Requesting data from a Chainlink oracle using Any API (Direct) Requests" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe><p>Direct Requests are the first iteration of Chainlink's service offerings that allow Web3 teams to write off-chain data (ie, data from the internet) to the blockchain. With their initial release, Direct Requests enabled a wide array of use cases across many industries ranging from finance, to insurance, to NFTs, and more.</p><p>More specifically, Direct Requests allow for a smart contract developer to make ad-hoc requests to an existing Chainlink node (oracle), which in turn responds by writing the requested value(s) back to the requestor's smart contract. In short, Direct Requests allow smart contracts to request data from the internet in a secure way.</p><p>While our <a href="https://docs.linkwellnodes.io/knowledgebase/Direct-Request-Guide" target="_blank" rel="noopener noreferrer">documentation</a> elaborates much more extensively on the mechanics of Direct Request jobs, here's a high-level overview:</p><ol><li>A smart contract (i.e., ChainlinkClient) â€” also known as a 'consumer contract' â€” makes a request to an on-chain oracle contract, typically owned and operated by a Chainlink node operator.</li><li>The relevant Chainlink node receives the request, interacts with the relevant API endpoint via HTTP, and writes the requested data back to the consumer contract.</li><li>The Web3 application reads the data from the consumer contract and executes the desired business logic based on this data.</li></ol><p>The following diagram illustrates a direct request to a Chainlink node via the manual triggering of the smart contract's request function. This request may be triggered via MetaMask, Chainlink Automation, web3.js call to an RPC endpoint, or any other means.</p><p><img loading="lazy" alt="Chainlink Direct Request Diagram" src="/assets/images/Chainlink-Direct-Request-Diagram-f3c468e603515c2b1416a979af9d8d8a.webp" title="Chainlink Direct Request Diagram" width="896" height="666" class="img_ev3q"></p><center><strong>Figure 1</strong>: Chainlink Direct Request Model</center><p></p><p>Until recently, Direct Requests were the only viable solution for Web3 developers looking to securely write external data on-chain. Since its inception, Direct Requests have successfully been implemented by hundreds of teams within the <a href="https://www.chainlinkecosystem.com/ecosystem" target="_blank" rel="noopener noreferrer">Chainlink Ecosystem</a>.</p><p>And yet â€” inherent shortcomings within the Direct Request model have precipitated the emergence of Chainlink Functions.</p><p><strong>Shortcomings of the Direct Request model:</strong></p><ol><li><strong>Searching for a Suitable Chainlink Node Operator</strong>-â€ŠTo make a direct request, Web3 developers must first find a suitable node operator via <a href="https://discord.com/invite/chainlink" target="_blank" rel="noopener noreferrer">Chainlink's official Discord server</a> (#operator-requests channel).</li><li><strong>Reliability Concerns</strong> â€” Within distributed and decentralized systems, single points of failure (SPOFs) are not ideal. Selecting a single Chainlink node operator â€” especially one not well-versed in an elastic, redundant infrastructure design- can lead to availability and reliability concerns.</li><li><strong>Centralization Risks</strong> â€” Entrusting data to a single Chainlink node operator poses trust issues, wherein a nefarious node operator could potentially manipulate data before writing it on-chain.</li><li><strong>External Adapters</strong> â€” Direct Requests must offload any advanced logic (ie, complicated parsing or post-processing of data) to an external adapter (EA) â€” a small, server-side runtime that hosts such functionality. Some oracles (such as us!) offer this service for free, whereas others require you to write or provide your own external adapter.</li></ol><p>As a result of these drawbacks, some Web3 developers have resorted to running their own Chainlink node in order to mitigate security and trust concerns. Yet, running a production-grade Chainlink infrastructure demands <a href="https://docs.linkwellnodes.io/knowledgebase/faq/Chainlink-Operators#profitability" target="_blank" rel="noopener noreferrer">substantial effort</a>, diverting valuable resources (both financial and otherwise) that could otherwise be spent on application development.</p><blockquote><p><em>&nbsp;<strong>A short plug</strong>: At LinkWell Nodes, we offer a robust suite of Direct Request service offerings that mitigates many of the above shortcomings. By following our <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">Direct Request API documentation</a>, you'll be able to develop a self-service Any API solution, and be up and running in minutes.</em></p><p><em>We also offer a comprehensive list of free service offerings to all customers, including free external adapter development, hosting, <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Service-Level-Agreement" target="_blank" rel="noopener noreferrer">data security guarantee</a>, and 24/7 monitoring of your direct request infrastructure.</em></p></blockquote><hr><p><strong>Enter Chainlink Functions.</strong></p><p>As a result of the historic challenges with Direct Requests, <a href="https://docs.chain.link/chainlink-functions" target="_blank" rel="noopener noreferrer">Chainlink Functions</a> emerged as a decentralized, self-service alternative in March 2023. Chainlink Functions executes all request logic on a DON (Decentralized Oracle Network), instead of via a single Chainlink Oracle â€” thereby minimizing concerns around centralization and reliability.</p><p>It's worth mentioning that Chainlink Functions operates via a self-service request model: users write their request functionality in JavaScript (JS), and a network of node operators executes the logic and returns the response.</p><p><img loading="lazy" alt="Chainlink Functions" src="/assets/images/Chainlink-Functions-Diagram-96f2645ec08a48d3441f64be35b67156.webp" width="2048" height="877" class="img_ev3q"></p><center><strong>Figure 2</strong>: Chainlink Functions request model</center><p></p><p>From <a href="https://blog.chain.link/introducing-chainlink-functions/" target="_blank" rel="noopener noreferrer">Chainlink's blog</a>, major benefits of Functions include:</p><ul><li><strong>Trust-minimized security:</strong> Build upon time-tested decentralized infrastructure that already helps secure billions of dollars for Web3 apps.</li><li><strong>Self-service model:</strong> Get started in minutes with Functions' serverless development solution, which features a CLI, starter kits, and a debugging environment.</li><li><strong>Serverless runtime environment:</strong> Run JavaScript (JS) code in a serverless manner so that you can focus less on infrastructure (ie, writing an external adapter), and more on your core application.</li></ul><p>The accessibility brought by Functions fundamentally transforms the landscape for Web3 developers, opening boundless opportunities for smart contracts to interact with the real world in a trust-minimized manner.</p><p><strong>Drawbacks of Chainlink Functions:</strong></p><p>Despite the obvious benefits and allure of Chainlink Functions, certain <a href="https://docs.linkwellnodes.io/knowledgebase/faq/Chainlink-Users#limitations-of-chainlink-functions" target="_blank" rel="noopener noreferrer">limitations</a> do need consideration:</p><ol><li><strong>Limited Beta:</strong> Functions is currently in limited Beta. Chainlink's documentation currently states that "developers must follow best practices and not use the Beta for any mission-critical application or secure any value". Furthermore, Functions is only live on four mainnets at the time of this writing â€” Ethereum, Polygon, Arbitrum, and Avalanche (you can check the most up-to-date list of networks here).</li><li><strong>Service Limits:</strong> Functions imposes several service limitations (ie, gas cost, execution time, and idempotence of your business logic) which you can view within <a href="https://docs.chain.link/chainlink-functions/resources/service-limits" target="_blank" rel="noopener noreferrer">Chainlink's documentation</a>.</li><li><strong>Must program your own request in JavaScript (JS):</strong> Lastly, in order to use Chainlink Functions, you'll need to write your own request and response logic using JavaScript (JS). This may be a limitation for some users.</li></ol><p>While Chainlink Functions will almost certainly continue to evolve, the current state of the above limitations may give some users pause for production Web3 applications.</p><p>In the mean time, if you are a Web3 developer or project with time-sensitive requirements for off-chain data and/or computation for your mainnet applications, but are concerned about the above limitations, you ultimately have three options: 1) Wait for Functions to evolve and mature more to support your use case, 2) Implement Functions as-is, or 3) Utilize the Direct Request model (ie, reach out to an existing node operator, such as <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">ourselves</a>).</p><p><strong>Pros of Chainlink Direct Requests:</strong></p><p>Given some of the above limitations of Functions, the advantages of Chainlink's Direct Request model for some use cases becomes a bit more clear:</p><ol><li><strong>Maturity:</strong> Direct Requests have a longer-standing track record and established familiarity among developers. This maturity may simplify integration for some users â€” especially ones with projects that have already implemented the Direct Request logic within their systems.</li><li><strong>Control and Customization:</strong> While Functions provides streamlined and efficient execution, it may not accommodate the specific needs of certain applications which may exceed Function's service limitations (ie, gas costs, network support, execution time, etc.).</li><li><strong>Mainnet Support:</strong> Direct Requests are supported across all mainnet chains that <a href="https://docs.chain.link/resources/link-token-contracts" target="_blank" rel="noopener noreferrer">Chainlink supports</a>.</li><li><strong>Pricing:</strong> There is also typically a good deal of wiggle room in how much LINK is charged for each Direct Request job, whereas Functions uses a fixed calculation. Additionally, experienced Chainlink node operators can even help out with gas optimization within the client/consumer contracts request and fulfill functions, ultimately enabling them to reduce the amount of LINK charged per request.</li><li><strong>Human Support:</strong> While power users may not require it, establishing a relationship with an existing node operator via the Direct Request model provides for an experienced human component, and a support team that's available when you need the help.</li></ol><hr><p><strong>Conclusion</strong></p><p>The debate between Chainlink's Direct Requests and the innovative Chainlink Functions capabilities reflects the dynamic evolution within Web3, and more specifically, Chainlink's journey to becoming the industry-standard Web3 oracle platform.</p><p>While Chainlink Functions introduces a new realm of efficiency and security within the Chainlink ecosystem for Web3 developers, there are several limitations that warrant consideration. Conversely, while Direct Requests may offer benefits in terms of hands-free implementation, available networks, and pricing, one must consider centralization and reliability risks when making their decision. It's clear that each approach offers distinct advantages and limitations â€” choosing one will require careful consideration based on the specific needs of your project.</p><p>As the Web3 ecosystem continues to evolve, a nuanced understanding of these approaches will help to empower Web3 developers to navigate the complexities of off-chain data retrieval and computation, and implement the best solution for their endeavors.</p><p>If you have any questions, please don't hesitate to reach out!</p><blockquote><p><em>LinkWell Nodes is a U.S.-based Chainlink oracle.</em></p><p><em>We provide custom data feed capabilities and self-service oracle solutions across all major mainnet and testnet blockchains supported by Chainlink.</em></p><p><em>Looking for a custom data feed? Head on over to our <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">documentation</a></em>, <em>or hop into our <a href="https://discord.com/invite/Xs6SjqVPUA" target="_blank" rel="noopener noreferrer">Discord server</a> and ask for help!</em></p></blockquote><p><img loading="lazy" alt="LinkWell Nodes - U.S.-based Chainlink node operator" src="/assets/images/lw-banner_1080x606-c6d84e1ae6e43af8c26ee04d238969be.webp" title="LinkWell Nodes - U.S.-based Chainlink node operator" width="1080" height="606" class="img_ev3q"></p>]]></content>
        <author>
            <name>Ken Reiners</name>
            <uri>https://www.linkedin.com/in/ken-reiners-755806167/</uri>
        </author>
        <category label="chainlink" term="chainlink"/>
        <category label="oracle" term="oracle"/>
        <category label="data" term="data"/>
        <category label="functions" term="functions"/>
        <category label="any api" term="any api"/>
        <category label="web3" term="web3"/>
        <category label="blockchain" term="blockchain"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introduction]]></title>
        <id>https://docs.linkwellnodes.io/blog/2023/09/02/Introduction</id>
        <link href="https://docs.linkwellnodes.io/blog/2023/09/02/Introduction"/>
        <updated>2023-09-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A Chainlink community node operations team. Led by truth over trust. Driven to innovate, build and create. Our mission is to enable developers, startups and enterprises to unlock the true value of Web3.]]></summary>
        <content type="html"><![CDATA[<p>A Chainlink community node operations team. Led by truth over trust. Driven to innovate, build and create. Our mission is to enable developers, startups and enterprises to unlock the true value of Web3.</p><p><img loading="lazy" alt="LWN Logo" src="/assets/images/LWN-Banner-5bdf0e0e4ff66c43273766f53621cb15.jpg" width="1500" height="500" class="img_ev3q"></p><p>It's hard to believe how far Chainlink has come in the span of just five years. From their first white paper in 2017 in which Chainlink proposed a solution to the oracle problem, a problem once thought unsolvable, but refers to the inherent inability of blockchains to access external data, to their recent announcement on their collaboration with SWIFT and 12+ financial institutions, Chainlink has slowly but surely been fulfilling their destiny of becoming a global standard.</p><p>From the start, Chainlink has kept their nose to the grindstone, caring little for media attention or community hype for the first several years, and instead focusing their efforts on researching, developing and building. Last year's SmartCon felt like an inflection point for Chainlink after former Google CEO Eric Schmidt's Fireside chat with Chainlink CEO Sergey Nazarov in which Eric pressured Sergey to just come out and announce Chainlink's true planâ€Š-â€Šfor Chainlink to have a presence in virtually every aspect of Web3.</p><p>And after enabling $7 trillion in transaction value, integrating with over 1,700 Web3 projects and the development of CCIP (which is launching soon), it's safe to say that their plan for total world domination (just kidding, kind of) has slowly but surely been coming to fruition.</p><p>At LinkWell Nodes, we liken ourselves to Chainlink in a sense. While perhaps not on such a large or epic scale, we too have been keeping our nose to the grindstone, researching, developing and building. And after over a year of hard work and dedication building out our Chainlink node infrastructure, we decided it was time to step out of the shadows and formally announce what we've been working on, and what we have in store.</p><p>But before we do, you may be wondering, where did these LinkWell Nodes guys come from? What are they all about, and who are they? Well, hold on to your tendies, as it's time for a short bedtime story.</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="our-story">Our Story<a href="#our-story" class="hash-link" aria-label="Direct link to Our Story" title="Direct link to Our Story">â€‹</a></h2><p>LinkWell Nodes' story began shortly after the 2022 Chainlink Oracle Olympicsâ€Š-â€Ša global competition of 30 professional teams vying for the right to become the next official Chainlink node operator. As individual participants during the competition, we (Ken and Derekâ€Š-â€ŠLinkWell Nodes' co-founders) ended up tying for third placeâ€Š-â€Špassing every challenge that Chainlink threw at us, but just barely missing out on the bonus points which cinched the victory for the winning teamâ€Š-â€ŠNorthWest Nodes.</p><p>Ken likes to blame his wife for being pregnant and giving birth to his second daughter during the last two days of the competition, but all jokes aside, Ken and Derek decided to join forces, and shortly after, LinkWell Nodes was formed.</p><p>As a freshly minted Chainlink node operations team, we immediately went back to the drawing board with an initial vision of designing and engineering the most sophisticated and elegant Chainlink node deployment model that we could possibly devise, with scalability, redundancy, and security at the forefront. With Ken's area of expertise in cybersecurity and Splunk (an enterprise grade monitoring platform), and Derek's area of expertise as a full-stack developer, and our combined expertise with AWS and Chainlink node operations, the path forward was clear.</p><p>After over a year of aggressive engineering efforts in the infrastructure, monitoring, and cybersecurity space with our three favorite technologiesâ€Š-â€ŠAWS, Splunk, and Chainlink, we think that we were able to succeed in fulfilling that vision.</p><p>Furthermore, we designed our Chainlink infrastructure stack to be easily deployable and reusable, while keeping members of the Chainlink community desiring to spin up their own nodes as quickly and easily as possible, in mind. As a part of our mission to support the Chainlink community, we may be open sourcing some or all of our stack, but more on that later.</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="our-mission">Our Mission<a href="#our-mission" class="hash-link" aria-label="Direct link to Our Mission" title="Direct link to Our Mission">â€‹</a></h2><p>Led by truth over trust. Driven to innovate, build and create. Our mission is to support Chainlink in enabling developers, startups and enterprises unlock the true value of Web3.</p><p>Ultimately, we want to help Chainlink fulfill its mission by doing whatever we can to support the Chainlink community. As community-based Chainlink node operators, we are limited to what services we can provide, but that isn't stopping us from going above and beyond the call of duty.</p><p>After spinning up 5 mainnet chains, 6 testnet chains, over 130 direct request jobs and robust documentation to boot, LinkWell Nodes' present objective is to deliver secure, reliable, on-chain data to the general public, all while continuing to innovate on the back-end and supporting the community on the front-end.</p><p>LinkWell Nodes has its eyes set on eventually becoming an official node operator, but more importantly, being recognized as one of the most reliable, communicative, and supportive Node Operator teams present in the Chainlink (and broader Web3) ecosystem.</p><p>While we recognize that Functions, recently released, is a superior method in many ways to the traditional direct request model, it is still in beta, and currently comes with a few limitations. You can check out our FAQ in order to understand our stance on Functions a bit more in-depth, but at this time, we think there is still a desire and need for traditional direct request support.</p><p>That's why we have devoted significant efforts in building out (what we believe) is the most comprehensive set of Chainlink node job offerings and documentation in the public sphere today. Our aim with this effort is to set a new standard for Chainlink community support, and to provide Web3 developers with their off-chain data needs as effortlessly and seamlessly as possible.</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="what-we-have-in-store">What We Have In Store<a href="#what-we-have-in-store" class="hash-link" aria-label="Direct link to What We Have In Store" title="Direct link to What We Have In Store">â€‹</a></h2><p>Fortunately, we aren't putting all of our eggs in the direct request basket. We've also recognized how challenging it can be for newer Chainlink node operators who don't have as much knowledge or experience as we do with deploying, operating and maintaining Chainlink nodes.</p><p>After noticing the same questions arise over and over again in some of the more popular Chainlink Discord channels, we started building out an FAQ that we hope can act as the start of a knowledge base within our public documentation for both aspiring Chainlink node operators and consumers alike. As an aside, we have our own Discord channel as well if you'd like to pop in and join our small but growing community, or if you are a developer in need of support!</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="chainlink-deployment-model-in-aws">Chainlink Deployment Model In AWS<a href="#chainlink-deployment-model-in-aws" class="hash-link" aria-label="Direct link to Chainlink Deployment Model In AWS" title="Direct link to Chainlink Deployment Model In AWS">â€‹</a></h2><p>Additionally, as alluded to earlier, we may have plans in place to open source our Chainlink infrastructure stack for other members of the community to use. We aren't providing any guarantees or timelines on a public release at this time, but if there is enough demand and excitement for this release, we will be happy to move forward with it.
To summarize what that release would look like, however, it would be similar to the AWS Quickstart in that after some basic AWS account setup, a new user would simply fill out an AWS Cloudformation template, hit the deploy button, and be up and running with Chainlink node infrastructure in the time it takes to sip your morning coffee.</p><p>One of the major design choices we made with our Chainlink infrastructure deployment model was to make the actual deployment as simple and flexible as possible, with multiple deployment architectures in AWS. Looking to simply spin up a testnet Chainlink node in a public subnet with a 3rd party RPC connection for fast and easy access? We support that.</p><p>What about a highly-available and secure architecture with Chainlink nodes, external adapters and full nodes, and with auto-scaling and load balancing built in? We support that as well across all 5 mainnet chains and 6 testnet chains, all via Infrastructure as Code (IAC), with support for more chains to come in the future. What about monitoring and alerting? Out of the box, we include automatic Cloudwatch monitoring and alerting.</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="splunk-integration">Splunk Integration<a href="#splunk-integration" class="hash-link" aria-label="Direct link to Splunk Integration" title="Direct link to Splunk Integration">â€‹</a></h2><p>But one of the features we are most excited to share is our deep integration with Splunk. While our Splunk integration deserves a separate blog or two on its own (stay posted for that), Splunk is one of the most, if not the most powerful enterprise grade monitoring, alerting and analytics tool on the market today. For the ninth time running, Splunk was named a "Leader" in Gartner's 2022 Magic Quadrant (MQ) for Security Information and Event Management (SIEM).</p><p>Tireless efforts were made to not only automatically deploy and configure Splunk within our Cloudformation templates at the flip of a switch, but to also automatically forward all Chainlink infrastructure logs directly into Splunk upon instance boot, if desired to do so.</p><p>As we were able to engineer this solution from the ground up, the infrastructure logs and metrics coming from Chainlink nodes, databases, full nodes and external adapters, to name some of the major ones, get fired off to Splunk where they are stored, parsed and configured to populate a robust suite of Chainlink monitoring dashboards and alerts that are wrapped up in our custom built Splunk application.</p><p>We didn't just stop at Chainlink infrastructure logs either, as we have monitoring in place at the AWS account level. Cloudtrail API calls, config changes, IAM actions, VPN activity and more are all forwarded and logged in Splunk. And yes, we have dashboards and alerts for this activity too.</p><p>As self-proclaimed trendsetters and innovators with the perfect skill sets and background to bring our Chainlink infrastructure and Splunk monitoring capability to life, we don't mention any of this in a boastful manner, but mostly because we are passionate and excited to share what we've developed, and what we have to offer, with the greater Chainlink community.</p><p>That being said, it's important to note that due to the exhaustive and at times cumbersome nature of configuring and maintaining Splunk, if there were enough interest and demand, we are considering offering Splunk, along with several other very useful of powerful features that we haven't mentioned yet, as a set of premium but optional capabilities under a subscription based model.</p><p>In a perfect world we'd open source everything, but for the time being we aren't quite there yet, so even a small subscription fee would help our ambitious development efforts towards supporting the Chainlink community. But we can cross that bridge when we get there.</p><p>Lastly, we recognize that there will likely be an endless need for Chainlink educators and content creators. Whether that be educational content geared towards Chainlink node operations, or content geared towards supporting Web3 developers interested in using Chainlink services, we are here to help.</p><p>With what feels like a bull market just around the corner coupled with Chainlink's seemingly unstoppable momentum, there couldn't be a more exciting time to be a part of the Chainlink community, and one can't help but wonder what the next 5 years will have in store!</p><p>If you are interested in staying tuned, feel free to join our Discord, or follow us on Twitter @LinkWell_Nodes.</p><p>Thanks for reading!</p>]]></content>
        <author>
            <name>Ken Reiners</name>
            <uri>https://www.linkedin.com/in/ken-reiners-755806167/</uri>
        </author>
        <author>
            <name>Derek Ricciuto</name>
            <uri>https://github.com/LinkWellNodes</uri>
        </author>
        <category label="Chainlink" term="Chainlink"/>
        <category label="Splunk" term="Splunk"/>
        <category label="AWS" term="AWS"/>
        <category label="oracles" term="oracles"/>
        <category label="web3" term="web3"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>https://docs.linkwellnodes.io/blog/2023/09/01/Welcome</id>
        <link href="https://docs.linkwellnodes.io/blog/2023/09/01/Welcome"/>
        <updated>2023-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome to our blog!]]></summary>
        <content type="html"><![CDATA[<p>Welcome to our blog!</p><p>At our core, we are committed to supporting the Chainlink community in any way we can. Through our expertise as Chainlink node operators and Web3 developers, we strive to provide useful and actionable content to help users and developers navigate the Chainlink ecosystem. We are dedicated to sharing our knowledge and insights to empower individuals and teams in their journey with Chainlink.</p><p>In this blog, we will cover a wide range of topics that we believe both aspiring Chainlink node operators and Chainlink users (Web3-based developers, projects, or teams) will greatly benefit from. For Chainlink node operators, we will share insights gained from deploying Chainlink nodes over the past few years, as well as our expertise in various industries including cloud, monitoring, security, development, and more.</p><p>The topics we will discuss include deploying Chainlink nodes and the associated infrastructure such as full nodes, external adapters, and databases. We will also address lesser-known subjects such as Chainlink node profitability, who should run a node and why, node maintenance, security, monitoring, and much more.</p><p>With extensive experience supporting Web3 requests for data via Chainlink, we are also committed to peeling back the curtain when it comes to interacting with Chainlink node operators such as ourselves, and also by providing clear and concise documentation for our direct request Any API services. We have already begun this effort with our <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Jobs-and-Pricing" target="_blank" rel="noopener noreferrer">Direct Request Guide</a> and <a href="https://docs.linkwellnodes.io/services/direct-request-jobs/Any-API-Guide" target="_blank" rel="noopener noreferrer">Any API Examples</a>, and we will continue to cover all of Chainlink's services in future blog posts, including CCIP, VRF, Functions, Automation, Data Feeds, and of course, Any API.</p><p>Additionally, we have encountered numerous recurring questions. These questions include: "Should I run my own node or utilize existing node operator services?", "Is running a Chainlink node worth it or profitable?", "How can I find a node operator for a custom data feed I require?", and more. We understand that finding answers to these questions can be challenging, as many of them may not be addressed in Chainlink's comprehensive community resources and online documentation. Our <a href="https://docs.linkwellnodes.io/knowledgebase/FAQ" target="_blank" rel="noopener noreferrer">FAQ</a>, and this blog, aim to provide answers to these questions.</p><p>We are thrilled to share our knowledge and expertise with anyone who interacts with Chainlink nodes in any capacity. We hope that you, as the reader, will find value in this blog. If you do, we kindly ask that you consider sharing it on social media! Additionally, feel free to join our Discord community, where you can learn more about specific topics or simply say hello.</p><p>Thank you for reading, and happy exploring!</p>]]></content>
        <author>
            <name>Ken Reiners</name>
            <uri>https://www.linkedin.com/in/ken-reiners-755806167/</uri>
        </author>
        <author>
            <name>Derek Ricciuto</name>
            <uri>https://github.com/LinkWellNodes</uri>
        </author>
        <category label="Chainlink" term="Chainlink"/>
    </entry>
</feed>